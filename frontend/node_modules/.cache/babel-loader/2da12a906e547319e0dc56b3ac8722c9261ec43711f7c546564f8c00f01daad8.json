{"ast":null,"code":"/**\n * Utility function to make API requests\n * @param {string} endpoint - API endpoint (starting with /)\n * @param {string} method - HTTP method (GET, POST, etc.)\n * @param {object} data - Request body for POST/PUT requests\n * @returns {Promise<any>} - Response data\n */\nconst apiRequest = async (endpoint, method = 'GET', data = null) => {\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const url = `${baseUrl}${endpoint}`;\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n\n  // Add authorization header if token exists\n  const token = localStorage.getItem('token');\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  const config = {\n    method,\n    headers,\n    credentials: 'include' // For cookies if your API uses them\n  };\n  if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n    config.body = JSON.stringify(data);\n  }\n  const response = await fetch(url, config);\n\n  // Handle non-JSON responses\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    const result = await response.json();\n    if (!response.ok) {\n      // Format error response\n      throw {\n        status: response.status,\n        data: result,\n        message: result.detail || 'An error occurred'\n      };\n    }\n    return result;\n  } else {\n    if (!response.ok) {\n      throw {\n        status: response.status,\n        data: await response.text(),\n        message: 'An error occurred'\n      };\n    }\n    return await response.text();\n  }\n};\nexport default apiRequest;","map":{"version":3,"names":["apiRequest","endpoint","method","data","baseUrl","process","env","REACT_APP_API_URL","url","headers","token","localStorage","getItem","config","credentials","body","JSON","stringify","response","fetch","contentType","get","includes","result","json","ok","status","message","detail","text"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["/**\n * Utility function to make API requests\n * @param {string} endpoint - API endpoint (starting with /)\n * @param {string} method - HTTP method (GET, POST, etc.)\n * @param {object} data - Request body for POST/PUT requests\n * @returns {Promise<any>} - Response data\n */\nconst apiRequest = async (endpoint, method = 'GET', data = null) => {\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const url = `${baseUrl}${endpoint}`;\n  \n  const headers = {\n    'Content-Type': 'application/json',\n  };\n\n  // Add authorization header if token exists\n  const token = localStorage.getItem('token');\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  const config = {\n    method,\n    headers,\n    credentials: 'include', // For cookies if your API uses them\n  };\n\n  if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n    config.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, config);\n  \n  // Handle non-JSON responses\n  const contentType = response.headers.get('content-type');\n  if (contentType && contentType.includes('application/json')) {\n    const result = await response.json();\n    \n    if (!response.ok) {\n      // Format error response\n      throw { \n        status: response.status, \n        data: result,\n        message: result.detail || 'An error occurred'\n      };\n    }\n    \n    return result;\n  } else {\n    if (!response.ok) {\n      throw { \n        status: response.status, \n        data: await response.text(),\n        message: 'An error occurred'\n      };\n    }\n    \n    return await response.text();\n  }\n};\n\nexport default apiRequest;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,KAAK;EAClE,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACxE,MAAMC,GAAG,GAAG,GAAGJ,OAAO,GAAGH,QAAQ,EAAE;EAEnC,MAAMQ,OAAO,GAAG;IACd,cAAc,EAAE;EAClB,CAAC;;EAED;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUC,KAAK,EAAE;EAC9C;EAEA,MAAMG,MAAM,GAAG;IACbX,MAAM;IACNO,OAAO;IACPK,WAAW,EAAE,SAAS,CAAE;EAC1B,CAAC;EAED,IAAIX,IAAI,KAAKD,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,KAAK,IAAIA,MAAM,KAAK,OAAO,CAAC,EAAE;IACzEW,MAAM,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACd,IAAI,CAAC;EACpC;EAEA,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAACX,GAAG,EAAEK,MAAM,CAAC;;EAEzC;EACA,MAAMO,WAAW,GAAGF,QAAQ,CAACT,OAAO,CAACY,GAAG,CAAC,cAAc,CAAC;EACxD,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC3D,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAEpC,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;MAChB;MACA,MAAM;QACJC,MAAM,EAAER,QAAQ,CAACQ,MAAM;QACvBvB,IAAI,EAAEoB,MAAM;QACZI,OAAO,EAAEJ,MAAM,CAACK,MAAM,IAAI;MAC5B,CAAC;IACH;IAEA,OAAOL,MAAM;EACf,CAAC,MAAM;IACL,IAAI,CAACL,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM;QACJC,MAAM,EAAER,QAAQ,CAACQ,MAAM;QACvBvB,IAAI,EAAE,MAAMe,QAAQ,CAACW,IAAI,CAAC,CAAC;QAC3BF,OAAO,EAAE;MACX,CAAC;IACH;IAEA,OAAO,MAAMT,QAAQ,CAACW,IAAI,CAAC,CAAC;EAC9B;AACF,CAAC;AAED,eAAe7B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}