{"ast":null,"code":"import axios from 'axios';\n\n// Create custom instances\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  // Make sure /api is included\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Set authorization header if token exists\nconst token = localStorage.getItem('accessToken');\nif (token) {\n  api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n}\n\n// Handle token refresh properly\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error(\"No refresh token available\");\n      }\n\n      // Use the correct endpoint with base URL for token refresh\n      const response = await axios.post(`${process.env.REACT_APP_API_URL || 'http://localhost:8000/api'}/accounts/refresh/`, {\n        refresh: refreshToken\n      });\n      const {\n        access\n      } = response.data;\n      localStorage.setItem('accessToken', access);\n      api.defaults.headers.common['Authorization'] = `Bearer ${access}`;\n      originalRequest.headers['Authorization'] = `Bearer ${access}`;\n      return api(originalRequest);\n    } catch (refreshError) {\n      // Handle refresh failure (usually by logging out user)\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport const AuthAPI = {\n  login: async credentials => {\n    // Use the full URL for login endpoint\n    const response = await axios.post(`${process.env.REACT_APP_API_URL || 'http://localhost:8000/api'}/accounts/proxy-login/`, credentials);\n\n    // Automatically set the Authorization header after login\n    if (response.data.access) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\n    } else if (response.data.access_token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access_token}`;\n    }\n    return response.data;\n  },\n  register: async userData => {\n    // Ensure password2 is included in the request payload\n    // If password2 isn't provided but password is, use password as password2\n    const dataToSend = {\n      ...userData\n    };\n    if (!dataToSend.password2 && dataToSend.password) {\n      dataToSend.password2 = dataToSend.password;\n    }\n    try {\n      // Use the full URL for register endpoint\n      const response = await axios.post(`${process.env.REACT_APP_API_URL || 'http://localhost:8000/api'}/accounts/register/`, dataToSend);\n      console.log(\"Registration successful:\", response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Registration error details:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/accounts/me/');\n    return response.data;\n  }\n};\n\n// General API request function\nconst apiRequest = async (endpoint, method = 'GET', data = null, isFormData = false) => {\n  try {\n    const config = {\n      method: method,\n      url: endpoint\n    };\n    if (data) {\n      if (isFormData) {\n        config.data = data;\n        config.headers = {\n          ...config.headers,\n          'Content-Type': 'multipart/form-data'\n        };\n      } else {\n        config.data = data;\n      }\n    }\n    const response = await api(config);\n    return response.data;\n  } catch (error) {\n    console.error(`API request failed: ${endpoint}`, error);\n    throw error;\n  }\n};\nexport default apiRequest;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","token","localStorage","getItem","defaults","common","interceptors","response","use","error","_error$response","originalRequest","config","status","_retry","refreshToken","Error","post","refresh","access","data","setItem","refreshError","removeItem","Promise","reject","AuthAPI","login","credentials","access_token","register","userData","dataToSend","password2","password","console","log","_error$response2","message","getCurrentUser","get","apiRequest","endpoint","method","isFormData","url"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create custom instances\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',  // Make sure /api is included\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Set authorization header if token exists\nconst token = localStorage.getItem('accessToken');\nif (token) {\n  api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n}\n\n// Handle token refresh properly\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (!refreshToken) {\n          throw new Error(\"No refresh token available\");\n        }\n        \n        // Use the correct endpoint with base URL for token refresh\n        const response = await axios.post(\n          `${process.env.REACT_APP_API_URL || 'http://localhost:8000/api'}/accounts/refresh/`, \n          { refresh: refreshToken }\n        );\n        const { access } = response.data;\n        \n        localStorage.setItem('accessToken', access);\n        api.defaults.headers.common['Authorization'] = `Bearer ${access}`;\n        originalRequest.headers['Authorization'] = `Bearer ${access}`;\n        \n        return api(originalRequest);\n      } catch (refreshError) {\n        // Handle refresh failure (usually by logging out user)\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        return Promise.reject(refreshError);\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport const AuthAPI = {\n  login: async (credentials) => {\n    // Use the full URL for login endpoint\n    const response = await axios.post(\n      `${process.env.REACT_APP_API_URL || 'http://localhost:8000/api'}/accounts/proxy-login/`,\n      credentials\n    );\n    \n    // Automatically set the Authorization header after login\n    if (response.data.access) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access}`;\n    } else if (response.data.access_token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access_token}`;\n    }\n    \n    return response.data;\n  },\n  register: async (userData) => {\n    // Ensure password2 is included in the request payload\n    // If password2 isn't provided but password is, use password as password2\n    const dataToSend = { ...userData };\n    if (!dataToSend.password2 && dataToSend.password) {\n      dataToSend.password2 = dataToSend.password;\n    }\n    \n    try {\n      // Use the full URL for register endpoint\n      const response = await axios.post(\n        `${process.env.REACT_APP_API_URL || 'http://localhost:8000/api'}/accounts/register/`,\n        dataToSend\n      );\n      console.log(\"Registration successful:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Registration error details:\", error.response?.data || error.message);\n      throw error;\n    }\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/accounts/me/');\n    return response.data;\n  },\n};\n\n// General API request function\nconst apiRequest = async (endpoint, method = 'GET', data = null, isFormData = false) => {\n  try {\n    const config = {\n      method: method,\n      url: endpoint,\n    };\n    \n    if (data) {\n      if (isFormData) {\n        config.data = data;\n        config.headers = {\n          ...config.headers,\n          'Content-Type': 'multipart/form-data',\n        };\n      } else {\n        config.data = data;\n      }\n    }\n    \n    const response = await api(config);\n    return response.data;\n  } catch (error) {\n    console.error(`API request failed: ${endpoint}`, error);\n    throw error;\n  }\n};\n\nexport default apiRequest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}