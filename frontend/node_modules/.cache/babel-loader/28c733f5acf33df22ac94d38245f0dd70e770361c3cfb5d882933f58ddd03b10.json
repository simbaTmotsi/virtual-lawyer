{"ast":null,"code":"var _jsxFileName = \"/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AuthAPI } from '../utils/api'; // Corrected import path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Memoize checkAuthStatus with useCallback\n  const checkAuthStatus = useCallback(async (redirectToLogin = false) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setLoading(false);\n        if (redirectToLogin) {\n          navigate('/login');\n        }\n        return;\n      }\n\n      // Verify token with the backend using AuthAPI\n      const userData = await AuthAPI.getCurrentUser(); // Use AuthAPI method\n      console.log('User data retrieved:', userData);\n      setUser(userData);\n      setIsAuthenticated(true);\n      return userData;\n    } catch (error) {\n      console.error('Token validation failed:', error);\n      // Invalid token, clear storage\n      localStorage.removeItem('token');\n      // Ensure state reflects logged-out status\n      setUser(null);\n      setIsAuthenticated(false);\n\n      // Redirect to login if needed\n      if (redirectToLogin) {\n        navigate('/login');\n      }\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]); // Include navigate as a dependency\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, [checkAuthStatus]); // Now we can safely include checkAuthStatus in the dependency array\n\n  const login = async (email, password) => {\n    try {\n      // Use AuthAPI.login\n      const response = await AuthAPI.login({\n        email,\n        password\n      });\n\n      // Store the token - handle different response formats\n      if (response.access) {\n        // New format (JWT)\n        localStorage.setItem('token', response.access);\n\n        // If the response includes user data, set it directly\n        if (response.user) {\n          setUser(response.user);\n          setIsAuthenticated(true);\n          return response.user;\n        }\n      } else if (response.token) {\n        // Old format\n        localStorage.setItem('token', response.token);\n        if (response.user) {\n          setUser(response.user);\n          setIsAuthenticated(true);\n          return response.user;\n        }\n      } else {\n        throw new Error('No token received from server');\n      }\n\n      // Otherwise, fetch user data\n      return await checkAuthStatus();\n    } catch (error) {\n      console.error('Login error:', error);\n      // Clear any potentially stale token on login failure\n      localStorage.removeItem('token');\n      setUser(null);\n      setIsAuthenticated(false);\n      // Re-throw the error so the Login component can catch it\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      // Use AuthAPI.register\n      const response = await AuthAPI.register(userData);\n      // Optionally handle response, e.g., auto-login or confirmation message\n      return response;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n  const logout = async (redirectUrl = '/login') => {\n    try {\n      // Use AuthAPI.logout\n      await AuthAPI.logout();\n    } catch (error) {\n      // Log error but proceed with frontend logout regardless\n      console.error('Logout error:', error);\n    } finally {\n      // Always clear local storage and reset state\n      localStorage.removeItem('token');\n      setUser(null);\n      setIsAuthenticated(false);\n\n      // Redirect to login page after logout\n      if (redirectUrl) {\n        navigate(redirectUrl);\n      }\n    }\n  };\n  const fetchUserProfile = async () => {\n    try {\n      const userData = await AuthAPI.getCurrentUser();\n      setUser(userData);\n      return userData;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      throw error;\n    }\n  };\n\n  // Provide auth context values\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    register,\n    fetchUserProfile,\n    checkAuthStatus\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"Bte9bn/JZ0qc6RuhG5eaXiJNG2c=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","useNavigate","AuthAPI","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","navigate","checkAuthStatus","redirectToLogin","token","localStorage","getItem","userData","getCurrentUser","console","log","error","removeItem","login","email","password","response","access","setItem","Error","register","logout","redirectUrl","fetchUserProfile","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AuthAPI } from '../utils/api'; // Corrected import path\n\nconst AuthContext = createContext(null);\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Memoize checkAuthStatus with useCallback\n  const checkAuthStatus = useCallback(async (redirectToLogin = false) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setLoading(false);\n        if (redirectToLogin) {\n          navigate('/login');\n        }\n        return;\n      }\n\n      // Verify token with the backend using AuthAPI\n      const userData = await AuthAPI.getCurrentUser(); // Use AuthAPI method\n      console.log('User data retrieved:', userData);\n      setUser(userData);\n      setIsAuthenticated(true);\n      return userData;\n    } catch (error) {\n      console.error('Token validation failed:', error);\n      // Invalid token, clear storage\n      localStorage.removeItem('token');\n      // Ensure state reflects logged-out status\n      setUser(null);\n      setIsAuthenticated(false);\n      \n      // Redirect to login if needed\n      if (redirectToLogin) {\n        navigate('/login');\n      }\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]); // Include navigate as a dependency\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, [checkAuthStatus]); // Now we can safely include checkAuthStatus in the dependency array\n\n  const login = async (email, password) => {\n    try {\n      // Use AuthAPI.login\n      const response = await AuthAPI.login({ email, password });\n      \n      // Store the token - handle different response formats\n      if (response.access) {\n        // New format (JWT)\n        localStorage.setItem('token', response.access);\n        \n        // If the response includes user data, set it directly\n        if (response.user) {\n          setUser(response.user);\n          setIsAuthenticated(true);\n          return response.user;\n        }\n      } else if (response.token) {\n        // Old format\n        localStorage.setItem('token', response.token);\n        \n        if (response.user) {\n          setUser(response.user);\n          setIsAuthenticated(true);\n          return response.user;\n        }\n      } else {\n        throw new Error('No token received from server');\n      }\n      \n      // Otherwise, fetch user data\n      return await checkAuthStatus();\n    } catch (error) {\n      console.error('Login error:', error);\n      // Clear any potentially stale token on login failure\n      localStorage.removeItem('token');\n      setUser(null);\n      setIsAuthenticated(false);\n      // Re-throw the error so the Login component can catch it\n      throw error; \n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      // Use AuthAPI.register\n      const response = await AuthAPI.register(userData);\n      // Optionally handle response, e.g., auto-login or confirmation message\n      return response;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n\n  const logout = async (redirectUrl = '/login') => {\n    try {\n      // Use AuthAPI.logout\n      await AuthAPI.logout();\n    } catch (error) {\n      // Log error but proceed with frontend logout regardless\n      console.error('Logout error:', error);\n    } finally {\n      // Always clear local storage and reset state\n      localStorage.removeItem('token');\n      setUser(null);\n      setIsAuthenticated(false);\n      \n      // Redirect to login page after logout\n      if (redirectUrl) {\n        navigate(redirectUrl);\n      }\n    }\n  };\n\n  const fetchUserProfile = async () => {\n    try {\n      const userData = await AuthAPI.getCurrentUser();\n      setUser(userData);\n      return userData;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      throw error;\n    }\n  };\n\n  // Provide auth context values\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    register,\n    fetchUserProfile,\n    checkAuthStatus,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}