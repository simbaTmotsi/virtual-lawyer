{"ast":null,"code":"/**\n * API utility functions for making HTTP requests\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\n/**\n * Make an API request\n * @param {string} endpoint - API endpoint\n * @param {string} method - HTTP method (GET, POST, PUT, DELETE)\n * @param {Object} data - Request body for POST/PUT requests\n * @param {Object} options - Additional fetch options\n * @returns {Promise<Object>} Response data\n */\nexport const apiRequest = async (endpoint, method = 'GET', data = null, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const fetchOptions = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n\n  // Add auth token if available\n  const token = localStorage.getItem('token');\n  if (token) {\n    fetchOptions.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Add request body for POST/PUT requests\n  if (data && (method === 'POST' || method === 'PUT')) {\n    fetchOptions.body = JSON.stringify(data);\n  }\n  try {\n    console.group(`API Request: ${method} ${endpoint}`);\n    console.log('Request options:', fetchOptions);\n    const response = await fetch(url, fetchOptions);\n    const contentType = response.headers.get('content-type');\n    const isJson = contentType && contentType.includes('application/json');\n\n    // Parse response\n    const responseData = isJson ? await response.json() : await response.text();\n\n    // If response is not ok, throw an error\n    if (!response.ok) {\n      // Include status and data in the error object\n      const error = new Error(`API Error: ${response.status}`); // Keep a general message\n      error.status = response.status;\n      error.data = responseData; // Attach the parsed response data\n      console.error('API request failed:', error, 'Response data:', responseData); // Log data here too\n      console.groupEnd();\n      throw error; // Re-throw the enhanced error\n    }\n    console.log('API request successful:', responseData);\n    console.groupEnd();\n    return responseData;\n  } catch (error) {\n    console.error('API request failed:', error);\n    console.groupEnd();\n    throw error; // Re-throw the error to be handled by the component\n  }\n};\n\n/**\n * Authentication-related API requests\n */\nexport const AuthAPI = {\n  register: userData => apiRequest('/api/auth/register/', 'POST', userData),\n  // Corrected path prefix\n\n  // Custom login handler for form-urlencoded data\n  login: async credentials => {\n    console.group('ðŸ”‘ Custom Login Request');\n    const {\n      username,\n      password\n    } = credentials; // Expect username now\n    const body = new URLSearchParams();\n    body.append('grant_type', ''); // Add required fields from curl\n    body.append('username', username);\n    body.append('password', password);\n    body.append('scope', '');\n    body.append('client_id', '');\n    body.append('client_secret', '');\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json' // Keep accept header if backend responds with JSON\n      },\n      body: body.toString()\n    };\n\n    // Assuming your dev server proxies /auth to http://localhost:8001\n    // If not, you might need the full URL: 'http://localhost:8001/auth/login'\n    const url = '/auth/login';\n    console.log('Request URL:', url);\n    console.log('Request Options:', requestOptions);\n    try {\n      const response = await fetch(url, requestOptions);\n      const responseData = await response.json(); // Assuming backend still replies with JSON\n\n      if (!response.ok) {\n        console.error('Login API Error:', response.status, responseData);\n        // Construct an error object similar to the generic apiRequest\n        const error = new Error(`API Error: ${response.status}`);\n        error.data = responseData; // Attach response data to the error\n        error.status = response.status;\n        throw error;\n      }\n      console.log('Login API successful:', responseData);\n      console.groupEnd();\n      return responseData; // Return the JSON response (e.g., tokens)\n    } catch (error) {\n      console.error('Login request failed:', error);\n      console.groupEnd();\n      throw error; // Re-throw the error\n    }\n  },\n  logout: () => apiRequest('/api/auth/logout/', 'POST'),\n  // Corrected path prefix\n  refreshToken: refreshToken => apiRequest('/api/auth/token/refresh/', 'POST', {\n    refresh: refreshToken\n  }),\n  // Keep /api/ prefix\n  forgotPassword: email => apiRequest('/api/auth/password-reset/', 'POST', {\n    email\n  }),\n  // Keep /api/ prefix\n  resetPassword: (token, password) => apiRequest('/api/auth/password-reset/confirm/', 'POST', {\n    token,\n    password\n  }),\n  // Keep /api/ prefix\n  // Assuming the backend endpoint for the current user is under accounts app\n  getCurrentUser: () => apiRequest('/api/accounts/users/me/', 'GET') // Keep /api/accounts/ prefix\n};\nexport default apiRequest;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiRequest","endpoint","method","data","options","url","fetchOptions","headers","token","localStorage","getItem","Authorization","body","JSON","stringify","console","group","log","response","fetch","contentType","get","isJson","includes","responseData","json","text","ok","error","Error","status","groupEnd","AuthAPI","register","userData","login","credentials","username","password","URLSearchParams","append","requestOptions","toString","logout","refreshToken","refresh","forgotPassword","email","resetPassword","getCurrentUser"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["/**\n * API utility functions for making HTTP requests\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\n/**\n * Make an API request\n * @param {string} endpoint - API endpoint\n * @param {string} method - HTTP method (GET, POST, PUT, DELETE)\n * @param {Object} data - Request body for POST/PUT requests\n * @param {Object} options - Additional fetch options\n * @returns {Promise<Object>} Response data\n */\nexport const apiRequest = async (endpoint, method = 'GET', data = null, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  \n  const fetchOptions = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  };\n  \n  // Add auth token if available\n  const token = localStorage.getItem('token');\n  if (token) {\n    fetchOptions.headers.Authorization = `Bearer ${token}`;\n  }\n  \n  // Add request body for POST/PUT requests\n  if (data && (method === 'POST' || method === 'PUT')) {\n    fetchOptions.body = JSON.stringify(data);\n  }\n  \n  try {\n    console.group(`API Request: ${method} ${endpoint}`);\n    console.log('Request options:', fetchOptions);\n    \n    const response = await fetch(url, fetchOptions);\n    const contentType = response.headers.get('content-type');\n    const isJson = contentType && contentType.includes('application/json');\n    \n    // Parse response\n    const responseData = isJson ? await response.json() : await response.text();\n    \n    // If response is not ok, throw an error\n    if (!response.ok) {\n      // Include status and data in the error object\n      const error = new Error(`API Error: ${response.status}`); // Keep a general message\n      error.status = response.status;\n      error.data = responseData; // Attach the parsed response data\n      console.error('API request failed:', error, 'Response data:', responseData); // Log data here too\n      console.groupEnd();\n      throw error; // Re-throw the enhanced error\n    }\n    \n    console.log('API request successful:', responseData);\n    console.groupEnd();\n    \n    return responseData;\n  } catch (error) {\n    console.error('API request failed:', error);\n    console.groupEnd();\n    throw error; // Re-throw the error to be handled by the component\n  }\n};\n\n/**\n * Authentication-related API requests\n */\nexport const AuthAPI = {\n  register: (userData) => apiRequest('/api/auth/register/', 'POST', userData), // Corrected path prefix\n  \n  // Custom login handler for form-urlencoded data\n  login: async (credentials) => {\n    console.group('ðŸ”‘ Custom Login Request');\n    const { username, password } = credentials; // Expect username now\n    const body = new URLSearchParams();\n    body.append('grant_type', ''); // Add required fields from curl\n    body.append('username', username);\n    body.append('password', password);\n    body.append('scope', '');\n    body.append('client_id', '');\n    body.append('client_secret', '');\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json', // Keep accept header if backend responds with JSON\n      },\n      body: body.toString(),\n    };\n\n    // Assuming your dev server proxies /auth to http://localhost:8001\n    // If not, you might need the full URL: 'http://localhost:8001/auth/login'\n    const url = '/auth/login'; \n    console.log('Request URL:', url);\n    console.log('Request Options:', requestOptions);\n\n    try {\n      const response = await fetch(url, requestOptions);\n      const responseData = await response.json(); // Assuming backend still replies with JSON\n\n      if (!response.ok) {\n        console.error('Login API Error:', response.status, responseData);\n        // Construct an error object similar to the generic apiRequest\n        const error = new Error(`API Error: ${response.status}`);\n        error.data = responseData; // Attach response data to the error\n        error.status = response.status;\n        throw error;\n      }\n\n      console.log('Login API successful:', responseData);\n      console.groupEnd();\n      return responseData; // Return the JSON response (e.g., tokens)\n    } catch (error) {\n      console.error('Login request failed:', error);\n      console.groupEnd();\n      throw error; // Re-throw the error\n    }\n  },\n\n  logout: () => apiRequest('/api/auth/logout/', 'POST'), // Corrected path prefix\n  refreshToken: (refreshToken) => apiRequest('/api/auth/token/refresh/', 'POST', { refresh: refreshToken }), // Keep /api/ prefix\n  forgotPassword: (email) => apiRequest('/api/auth/password-reset/', 'POST', { email }), // Keep /api/ prefix\n  resetPassword: (token, password) => apiRequest('/api/auth/password-reset/confirm/', 'POST', { token, password }), // Keep /api/ prefix\n  // Assuming the backend endpoint for the current user is under accounts app\n  getCurrentUser: () => apiRequest('/api/accounts/users/me/', 'GET'), // Keep /api/accounts/ prefix\n};\n\nexport default apiRequest;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,EAAE;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACvF,MAAMC,GAAG,GAAG,GAAGT,YAAY,GAAGK,QAAQ,EAAE;EAExC,MAAMK,YAAY,GAAG;IACnBJ,MAAM;IACNK,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGH,OAAO,CAACG;IACb,CAAC;IACD,GAAGH;EACL,CAAC;;EAED;EACA,MAAMI,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTF,YAAY,CAACC,OAAO,CAACI,aAAa,GAAG,UAAUH,KAAK,EAAE;EACxD;;EAEA;EACA,IAAIL,IAAI,KAAKD,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;IACnDI,YAAY,CAACM,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC;EAC1C;EAEA,IAAI;IACFY,OAAO,CAACC,KAAK,CAAC,gBAAgBd,MAAM,IAAID,QAAQ,EAAE,CAAC;IACnDc,OAAO,CAACE,GAAG,CAAC,kBAAkB,EAAEX,YAAY,CAAC;IAE7C,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAEC,YAAY,CAAC;IAC/C,MAAMc,WAAW,GAAGF,QAAQ,CAACX,OAAO,CAACc,GAAG,CAAC,cAAc,CAAC;IACxD,MAAMC,MAAM,GAAGF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC;;IAEtE;IACA,MAAMC,YAAY,GAAGF,MAAM,GAAG,MAAMJ,QAAQ,CAACO,IAAI,CAAC,CAAC,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;;IAE3E;IACA,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;MAChB;MACA,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,cAAcX,QAAQ,CAACY,MAAM,EAAE,CAAC,CAAC,CAAC;MAC1DF,KAAK,CAACE,MAAM,GAAGZ,QAAQ,CAACY,MAAM;MAC9BF,KAAK,CAACzB,IAAI,GAAGqB,YAAY,CAAC,CAAC;MAC3BT,OAAO,CAACa,KAAK,CAAC,qBAAqB,EAAEA,KAAK,EAAE,gBAAgB,EAAEJ,YAAY,CAAC,CAAC,CAAC;MAC7ET,OAAO,CAACgB,QAAQ,CAAC,CAAC;MAClB,MAAMH,KAAK,CAAC,CAAC;IACf;IAEAb,OAAO,CAACE,GAAG,CAAC,yBAAyB,EAAEO,YAAY,CAAC;IACpDT,OAAO,CAACgB,QAAQ,CAAC,CAAC;IAElB,OAAOP,YAAY;EACrB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3Cb,OAAO,CAACgB,QAAQ,CAAC,CAAC;IAClB,MAAMH,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMI,OAAO,GAAG;EACrBC,QAAQ,EAAGC,QAAQ,IAAKlC,UAAU,CAAC,qBAAqB,EAAE,MAAM,EAAEkC,QAAQ,CAAC;EAAE;;EAE7E;EACAC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5BrB,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;IACxC,MAAM;MAAEqB,QAAQ;MAAEC;IAAS,CAAC,GAAGF,WAAW,CAAC,CAAC;IAC5C,MAAMxB,IAAI,GAAG,IAAI2B,eAAe,CAAC,CAAC;IAClC3B,IAAI,CAAC4B,MAAM,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC;IAC/B5B,IAAI,CAAC4B,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC;IACjCzB,IAAI,CAAC4B,MAAM,CAAC,UAAU,EAAEF,QAAQ,CAAC;IACjC1B,IAAI,CAAC4B,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC;IACxB5B,IAAI,CAAC4B,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;IAC5B5B,IAAI,CAAC4B,MAAM,CAAC,eAAe,EAAE,EAAE,CAAC;IAEhC,MAAMC,cAAc,GAAG;MACrBvC,MAAM,EAAE,MAAM;MACdK,OAAO,EAAE;QACP,cAAc,EAAE,mCAAmC;QACnD,QAAQ,EAAE,kBAAkB,CAAE;MAChC,CAAC;MACDK,IAAI,EAAEA,IAAI,CAAC8B,QAAQ,CAAC;IACtB,CAAC;;IAED;IACA;IACA,MAAMrC,GAAG,GAAG,aAAa;IACzBU,OAAO,CAACE,GAAG,CAAC,cAAc,EAAEZ,GAAG,CAAC;IAChCU,OAAO,CAACE,GAAG,CAAC,kBAAkB,EAAEwB,cAAc,CAAC;IAE/C,IAAI;MACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAEoC,cAAc,CAAC;MACjD,MAAMjB,YAAY,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;;MAE5C,IAAI,CAACP,QAAQ,CAACS,EAAE,EAAE;QAChBZ,OAAO,CAACa,KAAK,CAAC,kBAAkB,EAAEV,QAAQ,CAACY,MAAM,EAAEN,YAAY,CAAC;QAChE;QACA,MAAMI,KAAK,GAAG,IAAIC,KAAK,CAAC,cAAcX,QAAQ,CAACY,MAAM,EAAE,CAAC;QACxDF,KAAK,CAACzB,IAAI,GAAGqB,YAAY,CAAC,CAAC;QAC3BI,KAAK,CAACE,MAAM,GAAGZ,QAAQ,CAACY,MAAM;QAC9B,MAAMF,KAAK;MACb;MAEAb,OAAO,CAACE,GAAG,CAAC,uBAAuB,EAAEO,YAAY,CAAC;MAClDT,OAAO,CAACgB,QAAQ,CAAC,CAAC;MAClB,OAAOP,YAAY,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7Cb,OAAO,CAACgB,QAAQ,CAAC,CAAC;MAClB,MAAMH,KAAK,CAAC,CAAC;IACf;EACF,CAAC;EAEDe,MAAM,EAAEA,CAAA,KAAM3C,UAAU,CAAC,mBAAmB,EAAE,MAAM,CAAC;EAAE;EACvD4C,YAAY,EAAGA,YAAY,IAAK5C,UAAU,CAAC,0BAA0B,EAAE,MAAM,EAAE;IAAE6C,OAAO,EAAED;EAAa,CAAC,CAAC;EAAE;EAC3GE,cAAc,EAAGC,KAAK,IAAK/C,UAAU,CAAC,2BAA2B,EAAE,MAAM,EAAE;IAAE+C;EAAM,CAAC,CAAC;EAAE;EACvFC,aAAa,EAAEA,CAACxC,KAAK,EAAE8B,QAAQ,KAAKtC,UAAU,CAAC,mCAAmC,EAAE,MAAM,EAAE;IAAEQ,KAAK;IAAE8B;EAAS,CAAC,CAAC;EAAE;EAClH;EACAW,cAAc,EAAEA,CAAA,KAAMjD,UAAU,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAE;AACtE,CAAC;AAED,eAAeA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}