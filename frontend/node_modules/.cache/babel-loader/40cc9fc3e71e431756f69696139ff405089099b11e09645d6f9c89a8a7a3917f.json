{"ast":null,"code":"/**\n * Helper utility for making authenticated API requests\n */\n\nexport const apiRequest = async (endpoint, method = 'GET', data = null) => {\n  // Support both Django and FastAPI backends\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n  // Determine if we're using a Django or FastAPI endpoint\n  const isDjangoEndpoint = endpoint.startsWith('/api/');\n\n  // Construct the complete URL\n  const url = `${baseUrl}${endpoint}`;\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n\n  // Add auth token to headers if it exists\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Django uses JWT format, FastAPI uses simple bearer\n    headers['Authorization'] = `${isDjangoEndpoint ? 'JWT' : 'Bearer'} ${token}`;\n  }\n  const options = {\n    method,\n    headers,\n    // For Django CSRF protection\n    credentials: isDjangoEndpoint ? 'include' : 'same-origin'\n  };\n\n  // Add request body for POST, PUT, PATCH\n  if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {\n    options.body = JSON.stringify(data);\n  }\n  console.log(`Making ${method} request to ${url}`);\n  try {\n    const response = await fetch(url, options);\n\n    // Parse response based on content type\n    let responseData;\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      responseData = await response.json();\n    } else {\n      responseData = await response.text();\n    }\n\n    // Check if response is successful\n    if (!response.ok) {\n      throw {\n        status: response.status,\n        statusText: response.statusText,\n        data: responseData\n      };\n    }\n    return responseData;\n  } catch (error) {\n    // Re-throw both network errors and response errors\n    console.error(`API Error (${method} ${url}):`, error);\n    throw error;\n  }\n};\nexport default apiRequest;","map":{"version":3,"names":["apiRequest","endpoint","method","data","baseUrl","process","env","REACT_APP_API_URL","isDjangoEndpoint","startsWith","url","headers","token","localStorage","getItem","options","credentials","includes","body","JSON","stringify","console","log","response","fetch","responseData","contentType","get","json","text","ok","status","statusText","error"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["/**\n * Helper utility for making authenticated API requests\n */\n\nexport const apiRequest = async (endpoint, method = 'GET', data = null) => {\n  // Support both Django and FastAPI backends\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  \n  // Determine if we're using a Django or FastAPI endpoint\n  const isDjangoEndpoint = endpoint.startsWith('/api/');\n  \n  // Construct the complete URL\n  const url = `${baseUrl}${endpoint}`;\n  \n  const headers = {\n    'Content-Type': 'application/json',\n  };\n  \n  // Add auth token to headers if it exists\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Django uses JWT format, FastAPI uses simple bearer\n    headers['Authorization'] = `${isDjangoEndpoint ? 'JWT' : 'Bearer'} ${token}`;\n  }\n  \n  const options = {\n    method,\n    headers,\n    // For Django CSRF protection\n    credentials: isDjangoEndpoint ? 'include' : 'same-origin',\n  };\n  \n  // Add request body for POST, PUT, PATCH\n  if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {\n    options.body = JSON.stringify(data);\n  }\n  \n  console.log(`Making ${method} request to ${url}`);\n  \n  try {\n    const response = await fetch(url, options);\n    \n    // Parse response based on content type\n    let responseData;\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      responseData = await response.json();\n    } else {\n      responseData = await response.text();\n    }\n    \n    // Check if response is successful\n    if (!response.ok) {\n      throw {\n        status: response.status,\n        statusText: response.statusText,\n        data: responseData,\n      };\n    }\n    \n    return responseData;\n  } catch (error) {\n    // Re-throw both network errors and response errors\n    console.error(`API Error (${method} ${url}):`, error);\n    throw error;\n  }\n};\n\nexport default apiRequest;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,MAAMA,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,KAAK;EACzE;EACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;EAExE;EACA,MAAMC,gBAAgB,GAAGP,QAAQ,CAACQ,UAAU,CAAC,OAAO,CAAC;;EAErD;EACA,MAAMC,GAAG,GAAG,GAAGN,OAAO,GAAGH,QAAQ,EAAE;EAEnC,MAAMU,OAAO,GAAG;IACd,cAAc,EAAE;EAClB,CAAC;;EAED;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACT;IACAD,OAAO,CAAC,eAAe,CAAC,GAAG,GAAGH,gBAAgB,GAAG,KAAK,GAAG,QAAQ,IAAII,KAAK,EAAE;EAC9E;EAEA,MAAMG,OAAO,GAAG;IACdb,MAAM;IACNS,OAAO;IACP;IACAK,WAAW,EAAER,gBAAgB,GAAG,SAAS,GAAG;EAC9C,CAAC;;EAED;EACA,IAAIL,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAACc,QAAQ,CAACf,MAAM,CAAC,EAAE;IACrDa,OAAO,CAACG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACjB,IAAI,CAAC;EACrC;EAEAkB,OAAO,CAACC,GAAG,CAAC,UAAUpB,MAAM,eAAeQ,GAAG,EAAE,CAAC;EAEjD,IAAI;IACF,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAEK,OAAO,CAAC;;IAE1C;IACA,IAAIU,YAAY;IAChB,MAAMC,WAAW,GAAGH,QAAQ,CAACZ,OAAO,CAACgB,GAAG,CAAC,cAAc,CAAC;IACxD,IAAID,WAAW,IAAIA,WAAW,CAACT,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3DQ,YAAY,GAAG,MAAMF,QAAQ,CAACK,IAAI,CAAC,CAAC;IACtC,CAAC,MAAM;MACLH,YAAY,GAAG,MAAMF,QAAQ,CAACM,IAAI,CAAC,CAAC;IACtC;;IAEA;IACA,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM;QACJC,MAAM,EAAER,QAAQ,CAACQ,MAAM;QACvBC,UAAU,EAAET,QAAQ,CAACS,UAAU;QAC/B7B,IAAI,EAAEsB;MACR,CAAC;IACH;IAEA,OAAOA,YAAY;EACrB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACd;IACAZ,OAAO,CAACY,KAAK,CAAC,cAAc/B,MAAM,IAAIQ,GAAG,IAAI,EAAEuB,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAejC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}