{"ast":null,"code":"import React,{useState,useEffect}from'react';import{api}from'../utils/api';// Create context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const NotificationsContext=/*#__PURE__*/React.createContext(null);const NotificationsProvider=_ref=>{let{children}=_ref;const[notifications,setNotifications]=useState([]);const[unreadCount,setUnreadCount]=useState(0);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const fetchNotifications=async()=>{try{setLoading(true);const response=await api.get('/api/notifications/');const notificationData=response.data||[];setNotifications(notificationData);setUnreadCount(notificationData.filter(notification=>!notification.read).length);setError(null);}catch(err){console.error('Failed to fetch notifications:',err);setError('Failed to load notifications');}finally{setLoading(false);}};const markAsRead=async notificationId=>{try{await api.patch(`/api/notifications/${notificationId}/`,{read:true});// Update local state\nsetNotifications(notifications.map(notification=>notification.id===notificationId?{...notification,read:true}:notification));setUnreadCount(prev=>Math.max(0,prev-1));return true;}catch(err){console.error('Failed to mark notification as read:',err);return false;}};const markAllAsRead=async()=>{try{await api.post('/api/notifications/mark-all-read/');// Update local state\nsetNotifications(notifications.map(notification=>({...notification,read:true})));setUnreadCount(0);return true;}catch(err){console.error('Failed to mark all notifications as read:',err);return false;}};// Fetch notifications when the component mounts\nuseEffect(()=>{fetchNotifications();// Set up polling for new notifications (every 60 seconds)\nconst intervalId=setInterval(fetchNotifications,60000);return()=>clearInterval(intervalId);},[]);return/*#__PURE__*/_jsx(NotificationsContext.Provider,{value:{notifications,unreadCount,loading,error,fetchNotifications,markAsRead,markAllAsRead},children:children});};// Hook for using the notifications context\nexport const useNotifications=()=>{const context=React.useContext(NotificationsContext);if(!context){throw new Error('useNotifications must be used within a NotificationsProvider');}return context;};export default NotificationsProvider;","map":{"version":3,"names":["React","useState","useEffect","api","jsx","_jsx","NotificationsContext","createContext","NotificationsProvider","_ref","children","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","error","setError","fetchNotifications","response","get","notificationData","data","filter","notification","read","length","err","console","markAsRead","notificationId","patch","map","id","prev","Math","max","markAllAsRead","post","intervalId","setInterval","clearInterval","Provider","value","useNotifications","context","useContext","Error"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/NotificationsContext.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { api } from '../utils/api';\n\n// Create context\nconst NotificationsContext = React.createContext(null);\n\nconst NotificationsProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const response = await api.get('/api/notifications/');\n      const notificationData = response.data || [];\n      setNotifications(notificationData);\n      setUnreadCount(notificationData.filter(notification => !notification.read).length);\n      setError(null);\n    } catch (err) {\n      console.error('Failed to fetch notifications:', err);\n      setError('Failed to load notifications');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAsRead = async (notificationId) => {\n    try {\n      await api.patch(`/api/notifications/${notificationId}/`, { read: true });\n      \n      // Update local state\n      setNotifications(notifications.map(notification => \n        notification.id === notificationId \n          ? { ...notification, read: true } \n          : notification\n      ));\n      \n      setUnreadCount(prev => Math.max(0, prev - 1));\n      return true;\n    } catch (err) {\n      console.error('Failed to mark notification as read:', err);\n      return false;\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      await api.post('/api/notifications/mark-all-read/');\n      \n      // Update local state\n      setNotifications(notifications.map(notification => ({ ...notification, read: true })));\n      setUnreadCount(0);\n      return true;\n    } catch (err) {\n      console.error('Failed to mark all notifications as read:', err);\n      return false;\n    }\n  };\n\n  // Fetch notifications when the component mounts\n  useEffect(() => {\n    fetchNotifications();\n    \n    // Set up polling for new notifications (every 60 seconds)\n    const intervalId = setInterval(fetchNotifications, 60000);\n    \n    return () => clearInterval(intervalId);\n  }, []);\n\n  return (\n    <NotificationsContext.Provider \n      value={{ \n        notifications, \n        unreadCount, \n        loading, \n        error, \n        fetchNotifications, \n        markAsRead, \n        markAllAsRead \n      }}\n    >\n      {children}\n    </NotificationsContext.Provider>\n  );\n};\n\n// Hook for using the notifications context\nexport const useNotifications = () => {\n  const context = React.useContext(NotificationsContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationsProvider');\n  }\n  return context;\n};\n\nexport default NotificationsProvider;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,GAAG,KAAQ,cAAc,CAElC;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,oBAAoB,cAAGN,KAAK,CAACO,aAAa,CAAC,IAAI,CAAC,CAEtD,KAAM,CAAAC,qBAAqB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACzC,KAAM,CAACE,aAAa,CAAEC,gBAAgB,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACY,WAAW,CAAEC,cAAc,CAAC,CAAGb,QAAQ,CAAC,CAAC,CAAC,CACjD,KAAM,CAACc,OAAO,CAAEC,UAAU,CAAC,CAAGf,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACgB,KAAK,CAAEC,QAAQ,CAAC,CAAGjB,QAAQ,CAAC,IAAI,CAAC,CAExC,KAAM,CAAAkB,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CACFH,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAjB,GAAG,CAACkB,GAAG,CAAC,qBAAqB,CAAC,CACrD,KAAM,CAAAC,gBAAgB,CAAGF,QAAQ,CAACG,IAAI,EAAI,EAAE,CAC5CX,gBAAgB,CAACU,gBAAgB,CAAC,CAClCR,cAAc,CAACQ,gBAAgB,CAACE,MAAM,CAACC,YAAY,EAAI,CAACA,YAAY,CAACC,IAAI,CAAC,CAACC,MAAM,CAAC,CAClFT,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAE,MAAOU,GAAG,CAAE,CACZC,OAAO,CAACZ,KAAK,CAAC,gCAAgC,CAAEW,GAAG,CAAC,CACpDV,QAAQ,CAAC,8BAA8B,CAAC,CAC1C,CAAC,OAAS,CACRF,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAc,UAAU,CAAG,KAAO,CAAAC,cAAc,EAAK,CAC3C,GAAI,CACF,KAAM,CAAA5B,GAAG,CAAC6B,KAAK,CAAC,sBAAsBD,cAAc,GAAG,CAAE,CAAEL,IAAI,CAAE,IAAK,CAAC,CAAC,CAExE;AACAd,gBAAgB,CAACD,aAAa,CAACsB,GAAG,CAACR,YAAY,EAC7CA,YAAY,CAACS,EAAE,GAAKH,cAAc,CAC9B,CAAE,GAAGN,YAAY,CAAEC,IAAI,CAAE,IAAK,CAAC,CAC/BD,YACN,CAAC,CAAC,CAEFX,cAAc,CAACqB,IAAI,EAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEF,IAAI,CAAG,CAAC,CAAC,CAAC,CAC7C,MAAO,KAAI,CACb,CAAE,MAAOP,GAAG,CAAE,CACZC,OAAO,CAACZ,KAAK,CAAC,sCAAsC,CAAEW,GAAG,CAAC,CAC1D,MAAO,MAAK,CACd,CACF,CAAC,CAED,KAAM,CAAAU,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAnC,GAAG,CAACoC,IAAI,CAAC,mCAAmC,CAAC,CAEnD;AACA3B,gBAAgB,CAACD,aAAa,CAACsB,GAAG,CAACR,YAAY,GAAK,CAAE,GAAGA,YAAY,CAAEC,IAAI,CAAE,IAAK,CAAC,CAAC,CAAC,CAAC,CACtFZ,cAAc,CAAC,CAAC,CAAC,CACjB,MAAO,KAAI,CACb,CAAE,MAAOc,GAAG,CAAE,CACZC,OAAO,CAACZ,KAAK,CAAC,2CAA2C,CAAEW,GAAG,CAAC,CAC/D,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA1B,SAAS,CAAC,IAAM,CACdiB,kBAAkB,CAAC,CAAC,CAEpB;AACA,KAAM,CAAAqB,UAAU,CAAGC,WAAW,CAACtB,kBAAkB,CAAE,KAAK,CAAC,CAEzD,MAAO,IAAMuB,aAAa,CAACF,UAAU,CAAC,CACxC,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEnC,IAAA,CAACC,oBAAoB,CAACqC,QAAQ,EAC5BC,KAAK,CAAE,CACLjC,aAAa,CACbE,WAAW,CACXE,OAAO,CACPE,KAAK,CACLE,kBAAkB,CAClBW,UAAU,CACVQ,aACF,CAAE,CAAA5B,QAAA,CAEDA,QAAQ,CACoB,CAAC,CAEpC,CAAC,CAED;AACA,MAAO,MAAM,CAAAmC,gBAAgB,CAAGA,CAAA,GAAM,CACpC,KAAM,CAAAC,OAAO,CAAG9C,KAAK,CAAC+C,UAAU,CAACzC,oBAAoB,CAAC,CACtD,GAAI,CAACwC,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAE,KAAK,CAAC,8DAA8D,CAAC,CACjF,CACA,MAAO,CAAAF,OAAO,CAChB,CAAC,CAED,cAAe,CAAAtC,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}