{"ast":null,"code":"import axios from 'axios';\n\n// Create custom instances\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Handle token refresh properly\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error(\"No refresh token available\");\n      }\n      const response = await axios.post('/api/accounts/refresh/', {\n        refresh: refreshToken\n      });\n      const {\n        access\n      } = response.data;\n      localStorage.setItem('accessToken', access);\n      api.defaults.headers.common['Authorization'] = `Bearer ${access}`;\n      originalRequest.headers['Authorization'] = `Bearer ${access}`;\n      return api(originalRequest);\n    } catch (refreshError) {\n      // Handle refresh failure (usually by logging out user)\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport const AuthAPI = {\n  login: async credentials => {\n    const response = await axios.post('/api/accounts/proxy-login/', credentials);\n    return response.data;\n  },\n  register: async userData => {\n    const response = await axios.post('/api/accounts/register/', userData);\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/api/accounts/me/');\n    return response.data;\n  }\n};\n\n// General API request function\nconst apiRequest = async (endpoint, method = 'GET', data = null, isFormData = false) => {\n  try {\n    const config = {\n      method: method,\n      url: endpoint\n    };\n    if (data) {\n      if (isFormData) {\n        config.data = data;\n        config.headers = {\n          ...config.headers,\n          'Content-Type': 'multipart/form-data'\n        };\n      } else {\n        config.data = data;\n      }\n    }\n    const response = await api(config);\n    return response.data;\n  } catch (error) {\n    console.error(`API request failed: ${endpoint}`, error);\n    throw error;\n  }\n};\nexport default apiRequest;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","response","use","error","originalRequest","config","status","_retry","refreshToken","localStorage","getItem","Error","post","refresh","access","data","setItem","defaults","common","refreshError","removeItem","Promise","reject","AuthAPI","login","credentials","register","userData","getCurrentUser","get","apiRequest","endpoint","method","isFormData","url","console"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create custom instances\nexport const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Handle token refresh properly\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (!refreshToken) {\n          throw new Error(\"No refresh token available\");\n        }\n        \n        const response = await axios.post('/api/accounts/refresh/', { refresh: refreshToken });\n        const { access } = response.data;\n        \n        localStorage.setItem('accessToken', access);\n        api.defaults.headers.common['Authorization'] = `Bearer ${access}`;\n        originalRequest.headers['Authorization'] = `Bearer ${access}`;\n        \n        return api(originalRequest);\n      } catch (refreshError) {\n        // Handle refresh failure (usually by logging out user)\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        return Promise.reject(refreshError);\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport const AuthAPI = {\n  login: async (credentials) => {\n    const response = await axios.post('/api/accounts/proxy-login/', credentials);\n    return response.data;\n  },\n  register: async (userData) => {\n    const response = await axios.post('/api/accounts/register/', userData);\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/api/accounts/me/');\n    return response.data;\n  },\n};\n\n// General API request function\nconst apiRequest = async (endpoint, method = 'GET', data = null, isFormData = false) => {\n  try {\n    const config = {\n      method: method,\n      url: endpoint,\n    };\n    \n    if (data) {\n      if (isFormData) {\n        config.data = data;\n        config.headers = {\n          ...config.headers,\n          'Content-Type': 'multipart/form-data',\n        };\n      } else {\n        config.data = data;\n      }\n    }\n    \n    const response = await api(config);\n    return response.data;\n  } catch (error) {\n    console.error(`API request failed: ${endpoint}`, error);\n    throw error;\n  }\n};\n\nexport default apiRequest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}