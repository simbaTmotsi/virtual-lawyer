{"ast":null,"code":"/**\n * API utility functions for making HTTP requests\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\n/**\n * Make an API request\n * @param {string} endpoint - API endpoint\n * @param {string} method - HTTP method (GET, POST, PUT, DELETE)\n * @param {Object} data - Request body for POST/PUT requests\n * @param {Object} options - Additional fetch options\n * @returns {Promise<Object>} Response data\n */\nexport const apiRequest = async (endpoint, method = 'GET', data = null, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const fetchOptions = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n\n  // Add auth token if available\n  const token = localStorage.getItem('token');\n  if (token) {\n    fetchOptions.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Add request body for POST/PUT requests\n  if (data && (method === 'POST' || method === 'PUT')) {\n    fetchOptions.body = JSON.stringify(data);\n  }\n  try {\n    console.group(`API Request: ${method} ${endpoint}`);\n    console.log('Request options:', fetchOptions);\n    const response = await fetch(url, fetchOptions);\n    let responseData;\n\n    // Try to parse as JSON, fallback to text\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      responseData = await response.json();\n    } else {\n      responseData = await response.text();\n    }\n    console.log('Response status:', response.status);\n    console.log('Response data:', responseData);\n    console.groupEnd();\n    if (!response.ok) {\n      // Fix ESLint warning by properly creating an Error object\n      const error = new Error(`API Error: ${response.status}`);\n      error.status = response.status;\n      error.data = responseData;\n      throw error;\n    }\n    return responseData;\n  } catch (error) {\n    console.error('API request failed:', error);\n    console.groupEnd();\n    throw error; // Re-throw the error to be handled by the component\n  }\n};\n\n/**\n * Authentication-related API requests\n */\nexport const AuthAPI = {\n  register: userData => apiRequest('/api/auth/register/', 'POST', userData),\n  // Assuming '/api/auth/register/' endpoint\n  login: credentials => apiRequest('/api/auth/login/', 'POST', credentials),\n  // Updated path\n  logout: () => apiRequest('/api/auth/logout/', 'POST'),\n  // Updated path\n  refreshToken: refreshToken => apiRequest('/api/auth/token/refresh/', 'POST', {\n    refresh: refreshToken\n  }),\n  // Assuming '/api/auth/token/refresh/'\n  forgotPassword: email => apiRequest('/api/auth/password-reset/', 'POST', {\n    email\n  }),\n  // Updated path\n  resetPassword: (token, password) => apiRequest('/api/auth/password-reset/confirm/', 'POST', {\n    token,\n    password\n  }),\n  // Updated path\n  // Assuming the backend endpoint for the current user is under accounts app\n  getCurrentUser: () => apiRequest('/api/accounts/users/me/', 'GET') // Updated path\n};\nexport default apiRequest;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiRequest","endpoint","method","data","options","url","fetchOptions","headers","token","localStorage","getItem","Authorization","body","JSON","stringify","console","group","log","response","fetch","responseData","contentType","get","includes","json","text","status","groupEnd","ok","error","Error","AuthAPI","register","userData","login","credentials","logout","refreshToken","refresh","forgotPassword","email","resetPassword","password","getCurrentUser"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["/**\n * API utility functions for making HTTP requests\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '';\n\n/**\n * Make an API request\n * @param {string} endpoint - API endpoint\n * @param {string} method - HTTP method (GET, POST, PUT, DELETE)\n * @param {Object} data - Request body for POST/PUT requests\n * @param {Object} options - Additional fetch options\n * @returns {Promise<Object>} Response data\n */\nexport const apiRequest = async (endpoint, method = 'GET', data = null, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  \n  const fetchOptions = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  };\n  \n  // Add auth token if available\n  const token = localStorage.getItem('token');\n  if (token) {\n    fetchOptions.headers.Authorization = `Bearer ${token}`;\n  }\n  \n  // Add request body for POST/PUT requests\n  if (data && (method === 'POST' || method === 'PUT')) {\n    fetchOptions.body = JSON.stringify(data);\n  }\n  \n  try {\n    console.group(`API Request: ${method} ${endpoint}`);\n    console.log('Request options:', fetchOptions);\n    \n    const response = await fetch(url, fetchOptions);\n    let responseData;\n    \n    // Try to parse as JSON, fallback to text\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      responseData = await response.json();\n    } else {\n      responseData = await response.text();\n    }\n    \n    console.log('Response status:', response.status);\n    console.log('Response data:', responseData);\n    console.groupEnd();\n    \n    if (!response.ok) {\n      // Fix ESLint warning by properly creating an Error object\n      const error = new Error(`API Error: ${response.status}`);\n      error.status = response.status;\n      error.data = responseData;\n      throw error;\n    }\n    \n    return responseData;\n  } catch (error) {\n    console.error('API request failed:', error);\n    console.groupEnd();\n    throw error; // Re-throw the error to be handled by the component\n  }\n};\n\n/**\n * Authentication-related API requests\n */\nexport const AuthAPI = {\n  register: (userData) => apiRequest('/api/auth/register/', 'POST', userData), // Assuming '/api/auth/register/' endpoint\n  login: (credentials) => apiRequest('/api/auth/login/', 'POST', credentials), // Updated path\n  logout: () => apiRequest('/api/auth/logout/', 'POST'), // Updated path\n  refreshToken: (refreshToken) => apiRequest('/api/auth/token/refresh/', 'POST', { refresh: refreshToken }), // Assuming '/api/auth/token/refresh/'\n  forgotPassword: (email) => apiRequest('/api/auth/password-reset/', 'POST', { email }), // Updated path\n  resetPassword: (token, password) => apiRequest('/api/auth/password-reset/confirm/', 'POST', { token, password }), // Updated path\n  // Assuming the backend endpoint for the current user is under accounts app\n  getCurrentUser: () => apiRequest('/api/accounts/users/me/', 'GET'), // Updated path\n};\n\nexport default apiRequest;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,EAAE;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACvF,MAAMC,GAAG,GAAG,GAAGT,YAAY,GAAGK,QAAQ,EAAE;EAExC,MAAMK,YAAY,GAAG;IACnBJ,MAAM;IACNK,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGH,OAAO,CAACG;IACb,CAAC;IACD,GAAGH;EACL,CAAC;;EAED;EACA,MAAMI,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTF,YAAY,CAACC,OAAO,CAACI,aAAa,GAAG,UAAUH,KAAK,EAAE;EACxD;;EAEA;EACA,IAAIL,IAAI,KAAKD,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;IACnDI,YAAY,CAACM,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC;EAC1C;EAEA,IAAI;IACFY,OAAO,CAACC,KAAK,CAAC,gBAAgBd,MAAM,IAAID,QAAQ,EAAE,CAAC;IACnDc,OAAO,CAACE,GAAG,CAAC,kBAAkB,EAAEX,YAAY,CAAC;IAE7C,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAEC,YAAY,CAAC;IAC/C,IAAIc,YAAY;;IAEhB;IACA,MAAMC,WAAW,GAAGH,QAAQ,CAACX,OAAO,CAACe,GAAG,CAAC,cAAc,CAAC;IACxD,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3DH,YAAY,GAAG,MAAMF,QAAQ,CAACM,IAAI,CAAC,CAAC;IACtC,CAAC,MAAM;MACLJ,YAAY,GAAG,MAAMF,QAAQ,CAACO,IAAI,CAAC,CAAC;IACtC;IAEAV,OAAO,CAACE,GAAG,CAAC,kBAAkB,EAAEC,QAAQ,CAACQ,MAAM,CAAC;IAChDX,OAAO,CAACE,GAAG,CAAC,gBAAgB,EAAEG,YAAY,CAAC;IAC3CL,OAAO,CAACY,QAAQ,CAAC,CAAC;IAElB,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB;MACA,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,cAAcZ,QAAQ,CAACQ,MAAM,EAAE,CAAC;MACxDG,KAAK,CAACH,MAAM,GAAGR,QAAQ,CAACQ,MAAM;MAC9BG,KAAK,CAAC1B,IAAI,GAAGiB,YAAY;MACzB,MAAMS,KAAK;IACb;IAEA,OAAOT,YAAY;EACrB,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3Cd,OAAO,CAACY,QAAQ,CAAC,CAAC;IAClB,MAAME,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,OAAO,GAAG;EACrBC,QAAQ,EAAGC,QAAQ,IAAKjC,UAAU,CAAC,qBAAqB,EAAE,MAAM,EAAEiC,QAAQ,CAAC;EAAE;EAC7EC,KAAK,EAAGC,WAAW,IAAKnC,UAAU,CAAC,kBAAkB,EAAE,MAAM,EAAEmC,WAAW,CAAC;EAAE;EAC7EC,MAAM,EAAEA,CAAA,KAAMpC,UAAU,CAAC,mBAAmB,EAAE,MAAM,CAAC;EAAE;EACvDqC,YAAY,EAAGA,YAAY,IAAKrC,UAAU,CAAC,0BAA0B,EAAE,MAAM,EAAE;IAAEsC,OAAO,EAAED;EAAa,CAAC,CAAC;EAAE;EAC3GE,cAAc,EAAGC,KAAK,IAAKxC,UAAU,CAAC,2BAA2B,EAAE,MAAM,EAAE;IAAEwC;EAAM,CAAC,CAAC;EAAE;EACvFC,aAAa,EAAEA,CAACjC,KAAK,EAAEkC,QAAQ,KAAK1C,UAAU,CAAC,mCAAmC,EAAE,MAAM,EAAE;IAAEQ,KAAK;IAAEkC;EAAS,CAAC,CAAC;EAAE;EAClH;EACAC,cAAc,EAAEA,CAAA,KAAM3C,UAAU,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAE;AACtE,CAAC;AAED,eAAeA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}