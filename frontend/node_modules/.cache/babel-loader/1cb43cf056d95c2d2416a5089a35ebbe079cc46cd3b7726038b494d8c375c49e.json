{"ast":null,"code":"var _jsxFileName = \"/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n// Import AuthAPI specifically if apiHelper exports multiple things, or keep default if apiRequest is the default export and AuthAPI is also exported\nimport apiRequest, { AuthAPI } from '../utils/apiHelper'; // Assuming apiHelper exports AuthAPI\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n\n      // Verify token with the backend using AuthAPI\n      const userData = await AuthAPI.getCurrentUser(); // Use AuthAPI method\n      console.log('User data retrieved:', userData);\n      setUser(userData);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Token validation failed:', error);\n      // Invalid token, clear storage\n      localStorage.removeItem('token');\n      // Ensure state reflects logged-out status\n      setUser(null);\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      // Use AuthAPI.login\n      const response = await AuthAPI.login({\n        email,\n        password\n      });\n      // Store the JWT token (assuming response structure)\n      // Adjust based on your actual API response for login\n      if (response && response.access) {\n        localStorage.setItem('token', response.access);\n        // Optionally store refresh token if provided: localStorage.setItem('refreshToken', response.refresh);\n\n        // Fetch user data after successful login\n        await checkAuthStatus(); // Re-use checkAuthStatus to fetch and set user\n\n        // Return response for potential further handling in component\n        return response;\n      } else {\n        // Handle cases where login response doesn't contain expected tokens\n        throw new Error('Login response did not contain expected tokens.');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      // Clear any potentially stale token on login failure\n      localStorage.removeItem('token');\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      // Use AuthAPI.register\n      const response = await AuthAPI.register(userData);\n      // Optionally handle response, e.g., auto-login or confirmation message\n      return response;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      // Use AuthAPI.logout\n      // Pass refresh token if your backend requires it for logout\n      // const refreshToken = localStorage.getItem('refreshToken');\n      // await AuthAPI.logout({ refresh: refreshToken }); // Example if refresh token needed\n      await AuthAPI.logout();\n    } catch (error) {\n      // Log error but proceed with frontend logout regardless\n      console.error('Logout API call failed:', error);\n    } finally {\n      // Clear tokens and user state on frontend\n      localStorage.removeItem('token');\n      // localStorage.removeItem('refreshToken'); // If using refresh tokens\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n\n  // Function to fetch user profile manually if needed (e.g., for debugger)\n  const fetchUserProfile = async () => {\n    setLoading(true);\n    await checkAuthStatus();\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout,\n    fetchUserProfile // Expose fetchUserProfile if needed elsewhere\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 10\n  }, this);\n}\n_s(AuthProvider, \"MIOyihIJe1jbesOAPrjh1+/HIzc=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiRequest","AuthAPI","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","checkAuthStatus","token","localStorage","getItem","userData","getCurrentUser","console","log","error","removeItem","login","email","password","response","access","setItem","Error","register","logout","fetchUserProfile","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n// Import AuthAPI specifically if apiHelper exports multiple things, or keep default if apiRequest is the default export and AuthAPI is also exported\nimport apiRequest, { AuthAPI } from '../utils/apiHelper'; // Assuming apiHelper exports AuthAPI\n\nconst AuthContext = createContext(null);\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n\n      // Verify token with the backend using AuthAPI\n      const userData = await AuthAPI.getCurrentUser(); // Use AuthAPI method\n      console.log('User data retrieved:', userData);\n      setUser(userData);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Token validation failed:', error);\n      // Invalid token, clear storage\n      localStorage.removeItem('token');\n      // Ensure state reflects logged-out status\n      setUser(null);\n      setIsAuthenticated(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      // Use AuthAPI.login\n      const response = await AuthAPI.login({ email, password });\n      // Store the JWT token (assuming response structure)\n      // Adjust based on your actual API response for login\n      if (response && response.access) {\n        localStorage.setItem('token', response.access);\n        // Optionally store refresh token if provided: localStorage.setItem('refreshToken', response.refresh);\n        \n        // Fetch user data after successful login\n        await checkAuthStatus(); // Re-use checkAuthStatus to fetch and set user\n        \n        // Return response for potential further handling in component\n        return response; \n      } else {\n         // Handle cases where login response doesn't contain expected tokens\n         throw new Error('Login response did not contain expected tokens.');\n      }\n\n    } catch (error) {\n      console.error('Login error:', error);\n      // Clear any potentially stale token on login failure\n      localStorage.removeItem('token');\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error;\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      // Use AuthAPI.register\n      const response = await AuthAPI.register(userData);\n      // Optionally handle response, e.g., auto-login or confirmation message\n      return response;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Use AuthAPI.logout\n      // Pass refresh token if your backend requires it for logout\n      // const refreshToken = localStorage.getItem('refreshToken');\n      // await AuthAPI.logout({ refresh: refreshToken }); // Example if refresh token needed\n      await AuthAPI.logout();\n    } catch (error) {\n      // Log error but proceed with frontend logout regardless\n      console.error('Logout API call failed:', error);\n    } finally {\n      // Clear tokens and user state on frontend\n      localStorage.removeItem('token');\n      // localStorage.removeItem('refreshToken'); // If using refresh tokens\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n  \n  // Function to fetch user profile manually if needed (e.g., for debugger)\n  const fetchUserProfile = async () => {\n     setLoading(true);\n     await checkAuthStatus();\n  };\n\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout,\n    fetchUserProfile, // Expose fetchUserProfile if needed elsewhere\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}