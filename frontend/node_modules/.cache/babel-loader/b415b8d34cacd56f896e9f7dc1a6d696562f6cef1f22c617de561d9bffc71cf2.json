{"ast":null,"code":"/**\n * Authentication debugging utility\n */\n\nexport const debugAuthIssues = () => {\n  console.group('🔐 Auth Token Debug Info');\n\n  // Check all stored tokens\n  const tokenKeys = ['token', 'authToken', 'access_token', 'accessToken'];\n  const foundTokens = [];\n  tokenKeys.forEach(key => {\n    const value = localStorage.getItem(key);\n    if (value) {\n      foundTokens.push({\n        key,\n        length: value.length,\n        preview: value.substring(0, 10) + '...'\n      });\n      console.log(`Found token with key \"${key}\" (length: ${value.length})`);\n    }\n  });\n  if (foundTokens.length === 0) {\n    console.log('❌ No authentication tokens found in localStorage');\n  } else if (foundTokens.length > 1) {\n    console.warn('⚠️ Multiple tokens found - potential inconsistency issue');\n  } else {\n    console.log('✅ Single token found with key:', foundTokens[0].key);\n  }\n\n  // Parse token if it exists\n  const mainToken = localStorage.getItem('token');\n  if (mainToken) {\n    try {\n      const parts = mainToken.split('.');\n      if (parts.length === 3) {\n        // Looks like JWT\n        try {\n          const payload = JSON.parse(atob(parts[1]));\n          console.log('Token payload:', payload);\n          if (payload.exp) {\n            const expDate = new Date(payload.exp * 1000);\n            const now = new Date();\n            console.log(`Token expires: ${expDate.toLocaleString()} (${now > expDate ? 'EXPIRED' : 'valid'})`);\n          }\n        } catch (e) {\n          console.log('Could not parse token payload:', e);\n        }\n      }\n    } catch (e) {\n      console.error('Error analyzing token:', e);\n    }\n  }\n  console.groupEnd();\n  return foundTokens.length > 0;\n};","map":{"version":3,"names":["debugAuthIssues","console","group","tokenKeys","foundTokens","forEach","key","value","localStorage","getItem","push","length","preview","substring","log","warn","mainToken","parts","split","payload","JSON","parse","atob","exp","expDate","Date","now","toLocaleString","e","error","groupEnd"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/tokenDebugger.js"],"sourcesContent":["/**\n * Authentication debugging utility\n */\n\nexport const debugAuthIssues = () => {\n  console.group('🔐 Auth Token Debug Info');\n  \n  // Check all stored tokens\n  const tokenKeys = ['token', 'authToken', 'access_token', 'accessToken'];\n  const foundTokens = [];\n  \n  tokenKeys.forEach(key => {\n    const value = localStorage.getItem(key);\n    if (value) {\n      foundTokens.push({ key, length: value.length, preview: value.substring(0, 10) + '...' });\n      console.log(`Found token with key \"${key}\" (length: ${value.length})`);\n    }\n  });\n  \n  if (foundTokens.length === 0) {\n    console.log('❌ No authentication tokens found in localStorage');\n  } else if (foundTokens.length > 1) {\n    console.warn('⚠️ Multiple tokens found - potential inconsistency issue');\n  } else {\n    console.log('✅ Single token found with key:', foundTokens[0].key);\n  }\n  \n  // Parse token if it exists\n  const mainToken = localStorage.getItem('token');\n  if (mainToken) {\n    try {\n      const parts = mainToken.split('.');\n      if (parts.length === 3) {\n        // Looks like JWT\n        try {\n          const payload = JSON.parse(atob(parts[1]));\n          console.log('Token payload:', payload);\n          if (payload.exp) {\n            const expDate = new Date(payload.exp * 1000);\n            const now = new Date();\n            console.log(`Token expires: ${expDate.toLocaleString()} (${now > expDate ? 'EXPIRED' : 'valid'})`);\n          }\n        } catch (e) {\n          console.log('Could not parse token payload:', e);\n        }\n      }\n    } catch (e) {\n      console.error('Error analyzing token:', e);\n    }\n  }\n  \n  console.groupEnd();\n  \n  return foundTokens.length > 0;\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,MAAMA,eAAe,GAAGA,CAAA,KAAM;EACnCC,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;;EAEzC;EACA,MAAMC,SAAS,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,aAAa,CAAC;EACvE,MAAMC,WAAW,GAAG,EAAE;EAEtBD,SAAS,CAACE,OAAO,CAACC,GAAG,IAAI;IACvB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACH,GAAG,CAAC;IACvC,IAAIC,KAAK,EAAE;MACTH,WAAW,CAACM,IAAI,CAAC;QAAEJ,GAAG;QAAEK,MAAM,EAAEJ,KAAK,CAACI,MAAM;QAAEC,OAAO,EAAEL,KAAK,CAACM,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG;MAAM,CAAC,CAAC;MACxFZ,OAAO,CAACa,GAAG,CAAC,yBAAyBR,GAAG,cAAcC,KAAK,CAACI,MAAM,GAAG,CAAC;IACxE;EACF,CAAC,CAAC;EAEF,IAAIP,WAAW,CAACO,MAAM,KAAK,CAAC,EAAE;IAC5BV,OAAO,CAACa,GAAG,CAAC,kDAAkD,CAAC;EACjE,CAAC,MAAM,IAAIV,WAAW,CAACO,MAAM,GAAG,CAAC,EAAE;IACjCV,OAAO,CAACc,IAAI,CAAC,0DAA0D,CAAC;EAC1E,CAAC,MAAM;IACLd,OAAO,CAACa,GAAG,CAAC,gCAAgC,EAAEV,WAAW,CAAC,CAAC,CAAC,CAACE,GAAG,CAAC;EACnE;;EAEA;EACA,MAAMU,SAAS,GAAGR,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC/C,IAAIO,SAAS,EAAE;IACb,IAAI;MACF,MAAMC,KAAK,GAAGD,SAAS,CAACE,KAAK,CAAC,GAAG,CAAC;MAClC,IAAID,KAAK,CAACN,MAAM,KAAK,CAAC,EAAE;QACtB;QACA,IAAI;UACF,MAAMQ,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;UAC1ChB,OAAO,CAACa,GAAG,CAAC,gBAAgB,EAAEK,OAAO,CAAC;UACtC,IAAIA,OAAO,CAACI,GAAG,EAAE;YACf,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACN,OAAO,CAACI,GAAG,GAAG,IAAI,CAAC;YAC5C,MAAMG,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;YACtBxB,OAAO,CAACa,GAAG,CAAC,kBAAkBU,OAAO,CAACG,cAAc,CAAC,CAAC,KAAKD,GAAG,GAAGF,OAAO,GAAG,SAAS,GAAG,OAAO,GAAG,CAAC;UACpG;QACF,CAAC,CAAC,OAAOI,CAAC,EAAE;UACV3B,OAAO,CAACa,GAAG,CAAC,gCAAgC,EAAEc,CAAC,CAAC;QAClD;MACF;IACF,CAAC,CAAC,OAAOA,CAAC,EAAE;MACV3B,OAAO,CAAC4B,KAAK,CAAC,wBAAwB,EAAED,CAAC,CAAC;IAC5C;EACF;EAEA3B,OAAO,CAAC6B,QAAQ,CAAC,CAAC;EAElB,OAAO1B,WAAW,CAACO,MAAM,GAAG,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}