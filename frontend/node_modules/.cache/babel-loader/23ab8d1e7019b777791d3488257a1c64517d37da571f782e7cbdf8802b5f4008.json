{"ast":null,"code":"var _jsxFileName = \"/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { AuthAPI } from '../utils/api';\nimport { debugAuthIssues } from '../utils/tokenDebugger';\n\n// Create Auth Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if the user is logged in on initial load\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  // Function to verify token and get current user\n  const checkAuthStatus = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setIsAuthenticated(false);\n      setCurrentUser(null);\n      setLoading(false);\n      return false;\n    }\n    try {\n      // Get current user with the stored token\n      const userData = await AuthAPI.getCurrentUser();\n      setCurrentUser(userData);\n      setIsAuthenticated(true);\n      setLoading(false);\n      return true;\n    } catch (error) {\n      console.error('Auth status check failed:', error);\n      localStorage.removeItem('token'); // Clear invalid token\n      setCurrentUser(null);\n      setIsAuthenticated(false);\n      setLoading(false);\n      return false;\n    }\n  };\n\n  // Login function\n  const login = async credentials => {\n    try {\n      setError(null);\n      const response = await AuthAPI.login(credentials);\n\n      // Store token and user data\n      localStorage.setItem('token', response.access); // Store as 'token' consistently\n      setCurrentUser(response.user);\n      setIsAuthenticated(true);\n\n      // For debugging\n      console.log('Login successful, token stored');\n      return response;\n    } catch (error) {\n      console.error('Login error:', error);\n      setError(error.message || 'Login failed');\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await AuthAPI.logout();\n    } catch (error) {\n      console.error('Logout API error:', error);\n      // Continue with local logout regardless of API success\n    }\n    localStorage.removeItem('token');\n    localStorage.setItem('just_logged_out', 'true'); // Flag to prevent immediate auth check\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n\n    // Clear flag after a short delay\n    setTimeout(() => {\n      localStorage.removeItem('just_logged_out');\n    }, 3000);\n  };\n\n  // Debug authentication issues\n  const debugAuth = () => {\n    return debugAuthIssues();\n  };\n  const value = {\n    currentUser,\n    isAuthenticated,\n    loading,\n    error,\n    login,\n    logout,\n    checkAuthStatus,\n    debugAuth\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"hNgQD0P+I/CyPsdPRzJTYoOt5q0=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AuthAPI","debugAuthIssues","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","checkAuthStatus","token","localStorage","getItem","userData","getCurrentUser","console","removeItem","login","credentials","response","setItem","access","user","log","message","logout","setTimeout","debugAuth","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { AuthAPI } from '../utils/api';\nimport { debugAuthIssues } from '../utils/tokenDebugger';\n\n// Create Auth Context\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if the user is logged in on initial load\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  // Function to verify token and get current user\n  const checkAuthStatus = async () => {\n    const token = localStorage.getItem('token');\n    \n    if (!token) {\n      setIsAuthenticated(false);\n      setCurrentUser(null);\n      setLoading(false);\n      return false;\n    }\n\n    try {\n      // Get current user with the stored token\n      const userData = await AuthAPI.getCurrentUser();\n      setCurrentUser(userData);\n      setIsAuthenticated(true);\n      setLoading(false);\n      return true;\n    } catch (error) {\n      console.error('Auth status check failed:', error);\n      localStorage.removeItem('token'); // Clear invalid token\n      setCurrentUser(null);\n      setIsAuthenticated(false);\n      setLoading(false);\n      return false;\n    }\n  };\n\n  // Login function\n  const login = async (credentials) => {\n    try {\n      setError(null);\n      const response = await AuthAPI.login(credentials);\n      \n      // Store token and user data\n      localStorage.setItem('token', response.access); // Store as 'token' consistently\n      setCurrentUser(response.user);\n      setIsAuthenticated(true);\n      \n      // For debugging\n      console.log('Login successful, token stored');\n      \n      return response;\n    } catch (error) {\n      console.error('Login error:', error);\n      setError(error.message || 'Login failed');\n      throw error;\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      await AuthAPI.logout();\n    } catch (error) {\n      console.error('Logout API error:', error);\n      // Continue with local logout regardless of API success\n    }\n    \n    localStorage.removeItem('token');\n    localStorage.setItem('just_logged_out', 'true'); // Flag to prevent immediate auth check\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n    \n    // Clear flag after a short delay\n    setTimeout(() => {\n      localStorage.removeItem('just_logged_out');\n    }, 3000);\n  };\n\n  // Debug authentication issues\n  const debugAuth = () => {\n    return debugAuthIssues();\n  };\n\n  const value = {\n    currentUser,\n    isAuthenticated,\n    loading,\n    error,\n    login,\n    logout,\n    checkAuthStatus,\n    debugAuth\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}