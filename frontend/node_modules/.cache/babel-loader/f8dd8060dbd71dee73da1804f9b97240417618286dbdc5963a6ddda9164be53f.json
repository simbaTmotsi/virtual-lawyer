{"ast":null,"code":"/**\n * Helper utility for making authenticated API requests\n */\n\nexport const apiRequest = async (endpoint, method = 'GET', data = null) => {\n  // Update to use FastAPI base URL\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const url = `${baseUrl}${endpoint}`;\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n\n  // Add auth token to headers if it exists\n  const token = localStorage.getItem('token');\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  const options = {\n    method,\n    headers\n  };\n\n  // Add request body for POST, PUT, PATCH\n  if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {\n    options.body = JSON.stringify(data);\n  }\n  console.log(`Making ${method} request to ${url}`);\n  try {\n    const response = await fetch(url, options);\n\n    // Always try to parse as JSON first\n    let responseData;\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      responseData = await response.json();\n    } else {\n      responseData = await response.text();\n    }\n\n    // Check if response is successful\n    if (!response.ok) {\n      // Format error with status and response data\n      throw {\n        status: response.status,\n        statusText: response.statusText,\n        data: responseData\n      };\n    }\n    return responseData;\n  } catch (error) {\n    // Re-throw both network errors and response errors\n    console.error(`API Error (${method} ${url}):`, error);\n    throw error;\n  }\n};\nexport default apiRequest;","map":{"version":3,"names":["apiRequest","endpoint","method","data","baseUrl","process","env","REACT_APP_API_URL","url","headers","token","localStorage","getItem","options","includes","body","JSON","stringify","console","log","response","fetch","responseData","contentType","get","json","text","ok","status","statusText","error"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["/**\n * Helper utility for making authenticated API requests\n */\n\nexport const apiRequest = async (endpoint, method = 'GET', data = null) => {\n  // Update to use FastAPI base URL\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const url = `${baseUrl}${endpoint}`;\n  \n  const headers = {\n    'Content-Type': 'application/json',\n  };\n  \n  // Add auth token to headers if it exists\n  const token = localStorage.getItem('token');\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  \n  const options = {\n    method,\n    headers,\n  };\n  \n  // Add request body for POST, PUT, PATCH\n  if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {\n    options.body = JSON.stringify(data);\n  }\n  \n  console.log(`Making ${method} request to ${url}`);\n  \n  try {\n    const response = await fetch(url, options);\n    \n    // Always try to parse as JSON first\n    let responseData;\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      responseData = await response.json();\n    } else {\n      responseData = await response.text();\n    }\n    \n    // Check if response is successful\n    if (!response.ok) {\n      // Format error with status and response data\n      throw {\n        status: response.status,\n        statusText: response.statusText,\n        data: responseData,\n      };\n    }\n    \n    return responseData;\n  } catch (error) {\n    // Re-throw both network errors and response errors\n    console.error(`API Error (${method} ${url}):`, error);\n    throw error;\n  }\n};\n\nexport default apiRequest;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,MAAMA,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,KAAK;EACzE;EACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACxE,MAAMC,GAAG,GAAG,GAAGJ,OAAO,GAAGH,QAAQ,EAAE;EAEnC,MAAMQ,OAAO,GAAG;IACd,cAAc,EAAE;EAClB,CAAC;;EAED;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUC,KAAK,EAAE;EAC9C;EAEA,MAAMG,OAAO,GAAG;IACdX,MAAM;IACNO;EACF,CAAC;;EAED;EACA,IAAIN,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAACW,QAAQ,CAACZ,MAAM,CAAC,EAAE;IACrDW,OAAO,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACd,IAAI,CAAC;EACrC;EAEAe,OAAO,CAACC,GAAG,CAAC,UAAUjB,MAAM,eAAeM,GAAG,EAAE,CAAC;EAEjD,IAAI;IACF,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAACb,GAAG,EAAEK,OAAO,CAAC;;IAE1C;IACA,IAAIS,YAAY;IAChB,MAAMC,WAAW,GAAGH,QAAQ,CAACX,OAAO,CAACe,GAAG,CAAC,cAAc,CAAC;IACxD,IAAID,WAAW,IAAIA,WAAW,CAACT,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3DQ,YAAY,GAAG,MAAMF,QAAQ,CAACK,IAAI,CAAC,CAAC;IACtC,CAAC,MAAM;MACLH,YAAY,GAAG,MAAMF,QAAQ,CAACM,IAAI,CAAC,CAAC;IACtC;;IAEA;IACA,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;MAChB;MACA,MAAM;QACJC,MAAM,EAAER,QAAQ,CAACQ,MAAM;QACvBC,UAAU,EAAET,QAAQ,CAACS,UAAU;QAC/B1B,IAAI,EAAEmB;MACR,CAAC;IACH;IAEA,OAAOA,YAAY;EACrB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACd;IACAZ,OAAO,CAACY,KAAK,CAAC,cAAc5B,MAAM,IAAIM,GAAG,IAAI,EAAEsB,KAAK,CAAC;IACrD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAe9B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}