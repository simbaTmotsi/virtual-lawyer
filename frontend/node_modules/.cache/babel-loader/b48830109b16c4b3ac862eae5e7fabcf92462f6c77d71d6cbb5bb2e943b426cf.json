{"ast":null,"code":"var _jsxFileName = \"/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useTransition } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { AuthAPI, api } from '../utils/api';\nimport axios from 'axios';\nimport { Outlet } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [accessToken, setAccessToken] = useState(localStorage.getItem('accessToken'));\n  const [isPending, startTransition] = useTransition();\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('accessToken');\n      if (token) {\n        try {\n          // Set the token in the API headers\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n          // Verify token is valid\n          const decodedToken = jwtDecode(token);\n          const currentTime = Date.now() / 1000;\n          if (decodedToken.exp > currentTime) {\n            try {\n              // Token is valid, fetch current user info\n              const userResponse = await AuthAPI.getCurrentUser();\n              startTransition(() => {\n                setUser(userResponse);\n                setIsAuthenticated(true);\n              });\n            } catch (error) {\n              // Error fetching user info\n              console.error('Error fetching user data:', error);\n              localStorage.removeItem('accessToken');\n              localStorage.removeItem('refreshToken');\n              startTransition(() => {\n                setUser(null);\n                setIsAuthenticated(false);\n              });\n            }\n          } else {\n            // Token expired, clear local storage\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            delete api.defaults.headers.common['Authorization'];\n            startTransition(() => {\n              setUser(null);\n              setIsAuthenticated(false);\n            });\n          }\n        } catch (error) {\n          console.error('Error initializing auth:', error);\n          // Invalid token, clear local storage\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n          delete api.defaults.headers.common['Authorization'];\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      } else {\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n      setIsLoading(false);\n    };\n    initializeAuth();\n  }, []);\n  const login = async ({\n    email,\n    password\n  }) => {\n    try {\n      setIsLoading(true);\n      console.log(\"Attempting login for:\", email);\n\n      // Use the AuthAPI.login to ensure consistent URL construction\n      const response = await AuthAPI.login({\n        email,\n        password\n      });\n\n      // Store tokens in localStorage - handle both formats that might be returned from the backend\n      if (response.access) {\n        localStorage.setItem('accessToken', response.access);\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.access}`;\n      } else if (response.access_token) {\n        localStorage.setItem('accessToken', response.access_token);\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.access_token}`;\n      }\n      if (response.refresh) {\n        localStorage.setItem('refreshToken', response.refresh);\n      }\n      setAccessToken(response.access || response.access_token);\n      setUser(response.user || null);\n      setIsAuthenticated(true);\n      return response;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    delete api.defaults.headers.common['Authorization'];\n    setAccessToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Registration function\n  const register = async userData => {\n    try {\n      setIsLoading(true);\n\n      // Ensure userData has password2 for the API\n      const dataToSend = {\n        ...userData\n      };\n      if (!dataToSend.password2 && dataToSend.password) {\n        dataToSend.password2 = dataToSend.password;\n      }\n      console.log(\"Sending registration data to API:\", dataToSend);\n\n      // Fix the URL construction to ensure proper API prefix\n      const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n      // Make sure the URL format is consistent with the API endpoint\n      const apiUrl = `${baseUrl}/api/accounts/register/`;\n      console.log(\"Registration API URL:\", apiUrl);\n      const response = await axios.post(apiUrl, dataToSend, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(\"Registration successful:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n\n      // Improve error handling to extract meaningful error messages\n      if (error.response && error.response.data) {\n        const errorData = error.response.data;\n        if (typeof errorData === 'object') {\n          // Handle detailed error messages from Django\n          console.error('API Error Response:', errorData);\n        }\n        if (errorData.detail) {\n          throw errorData;\n        }\n      }\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const isAdmin = user && user.role === 'admin';\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    accessToken,\n    login,\n    logout,\n    register,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children || /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 20\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"XbCYwi3nN9xkowP6KHz4OAvEOWg=\", false, function () {\n  return [useTransition];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === null) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useTransition","jwtDecode","AuthAPI","api","axios","Outlet","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","accessToken","setAccessToken","localStorage","getItem","isPending","startTransition","initializeAuth","token","defaults","headers","common","decodedToken","currentTime","Date","now","exp","userResponse","getCurrentUser","error","console","removeItem","login","email","password","log","response","access","setItem","access_token","refresh","logout","register","userData","dataToSend","password2","baseUrl","process","env","REACT_APP_API_URL","apiUrl","post","data","errorData","detail","isAdmin","role","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useTransition } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { AuthAPI, api } from '../utils/api';\nimport axios from 'axios';\nimport { Outlet } from 'react-router-dom';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [accessToken, setAccessToken] = useState(localStorage.getItem('accessToken'));\n  const [isPending, startTransition] = useTransition();\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('accessToken');\n      \n      if (token) {\n        try {\n          // Set the token in the API headers\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          \n          // Verify token is valid\n          const decodedToken = jwtDecode(token);\n          const currentTime = Date.now() / 1000;\n          \n          if (decodedToken.exp > currentTime) {\n            try {\n              // Token is valid, fetch current user info\n              const userResponse = await AuthAPI.getCurrentUser();\n              startTransition(() => {\n                setUser(userResponse);\n                setIsAuthenticated(true);\n              });\n            } catch (error) {\n              // Error fetching user info\n              console.error('Error fetching user data:', error);\n              localStorage.removeItem('accessToken');\n              localStorage.removeItem('refreshToken');\n              startTransition(() => {\n                setUser(null);\n                setIsAuthenticated(false);\n              });\n            }\n          } else {\n            // Token expired, clear local storage\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            delete api.defaults.headers.common['Authorization'];\n            startTransition(() => {\n              setUser(null);\n              setIsAuthenticated(false);\n            });\n          }\n        } catch (error) {\n          console.error('Error initializing auth:', error);\n          // Invalid token, clear local storage\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n          delete api.defaults.headers.common['Authorization'];\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      } else {\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n      \n      setIsLoading(false);\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async ({ email, password }) => {\n    try {\n      setIsLoading(true);\n      console.log(\"Attempting login for:\", email);\n      \n      // Use the AuthAPI.login to ensure consistent URL construction\n      const response = await AuthAPI.login({ email, password });\n      \n      // Store tokens in localStorage - handle both formats that might be returned from the backend\n      if (response.access) {\n        localStorage.setItem('accessToken', response.access);\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.access}`;\n      } else if (response.access_token) {\n        localStorage.setItem('accessToken', response.access_token);\n        api.defaults.headers.common['Authorization'] = `Bearer ${response.access_token}`;\n      }\n      \n      if (response.refresh) {\n        localStorage.setItem('refreshToken', response.refresh);\n      }\n      \n      setAccessToken(response.access || response.access_token);\n      setUser(response.user || null);\n      setIsAuthenticated(true);\n      \n      return response;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    delete api.defaults.headers.common['Authorization'];\n    setAccessToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Registration function\n  const register = async (userData) => {\n    try {\n      setIsLoading(true);\n      \n      // Ensure userData has password2 for the API\n      const dataToSend = { ...userData };\n      if (!dataToSend.password2 && dataToSend.password) {\n        dataToSend.password2 = dataToSend.password;\n      }\n      \n      console.log(\"Sending registration data to API:\", dataToSend);\n      \n      // Fix the URL construction to ensure proper API prefix\n      const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n      // Make sure the URL format is consistent with the API endpoint\n      const apiUrl = `${baseUrl}/api/accounts/register/`;\n      \n      console.log(\"Registration API URL:\", apiUrl);\n      \n      const response = await axios.post(\n        apiUrl,\n        dataToSend,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        }\n      );\n      \n      console.log(\"Registration successful:\", response.data);\n      \n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      \n      // Improve error handling to extract meaningful error messages\n      if (error.response && error.response.data) {\n        const errorData = error.response.data;\n        if (typeof errorData === 'object') {\n          // Handle detailed error messages from Django\n          console.error('API Error Response:', errorData);\n        }\n        if (errorData.detail) {\n          throw errorData;\n        }\n      }\n      \n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const isAdmin = user && user.role === 'admin';\n\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    accessToken,\n    login,\n    logout,\n    register,\n    isAdmin\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children || <Outlet />}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === null) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}