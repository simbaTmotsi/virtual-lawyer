{"ast":null,"code":"var _jsxFileName = \"/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { AuthAPI, api } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [accessToken, setAccessToken] = useState(localStorage.getItem('accessToken'));\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('accessToken');\n      if (token) {\n        try {\n          // Verify token is valid\n          const decodedToken = jwtDecode(token);\n          const currentTime = Date.now() / 1000;\n          if (decodedToken.exp > currentTime) {\n            // Token is valid, fetch current user info\n            const userResponse = await AuthAPI.getCurrentUser();\n            setUser(userResponse);\n            setIsAuthenticated(true);\n          } else {\n            // Token expired, clear local storage\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            setUser(null);\n            setIsAuthenticated(false);\n          }\n        } catch (error) {\n          console.error('Error initializing auth:', error);\n          // Invalid token, clear local storage\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      } else {\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n      setIsLoading(false);\n    };\n    initializeAuth();\n  }, []);\n  const login = async ({\n    email,\n    password\n  }) => {\n    try {\n      setIsLoading(true);\n      const response = await AuthAPI.login({\n        email,\n        password\n      });\n\n      // Store tokens in localStorage - handle both formats that might be returned from the backend\n      if (response.access) {\n        localStorage.setItem('accessToken', response.access);\n      } else if (response.access_token) {\n        localStorage.setItem('accessToken', response.access_token);\n      }\n      if (response.refresh) {\n        localStorage.setItem('refreshToken', response.refresh);\n      }\n      setAccessToken(response.access || response.access_token);\n      setUser(response.user || null);\n      setIsAuthenticated(true);\n      return response;\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    setAccessToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Registration function\n  const register = async userData => {\n    try {\n      // Ensure userData has password2 for the API\n      if (!userData.password2 && userData.password) {\n        userData = {\n          ...userData,\n          password2: userData.password\n        };\n      }\n      const response = await AuthAPI.register(userData);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n  const isAdmin = user && user.role === 'admin';\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    accessToken,\n    login,\n    logout,\n    register,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"/OJfsxpSQYN8+n9XIA4wUUOz2ks=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === null) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jwtDecode","AuthAPI","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","accessToken","setAccessToken","localStorage","getItem","initializeAuth","token","decodedToken","currentTime","Date","now","exp","userResponse","getCurrentUser","removeItem","error","console","login","email","password","response","access","setItem","access_token","refresh","logout","register","userData","password2","data","isAdmin","role","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { AuthAPI, api } from '../utils/api';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [accessToken, setAccessToken] = useState(localStorage.getItem('accessToken'));\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('accessToken');\n      \n      if (token) {\n        try {\n          // Verify token is valid\n          const decodedToken = jwtDecode(token);\n          const currentTime = Date.now() / 1000;\n          \n          if (decodedToken.exp > currentTime) {\n            // Token is valid, fetch current user info\n            const userResponse = await AuthAPI.getCurrentUser();\n            setUser(userResponse);\n            setIsAuthenticated(true);\n          } else {\n            // Token expired, clear local storage\n            localStorage.removeItem('accessToken');\n            localStorage.removeItem('refreshToken');\n            setUser(null);\n            setIsAuthenticated(false);\n          }\n        } catch (error) {\n          console.error('Error initializing auth:', error);\n          // Invalid token, clear local storage\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('refreshToken');\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      } else {\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n      \n      setIsLoading(false);\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async ({ email, password }) => {\n    try {\n      setIsLoading(true);\n      const response = await AuthAPI.login({ email, password });\n      \n      // Store tokens in localStorage - handle both formats that might be returned from the backend\n      if (response.access) {\n        localStorage.setItem('accessToken', response.access);\n      } else if (response.access_token) {\n        localStorage.setItem('accessToken', response.access_token);\n      }\n      \n      if (response.refresh) {\n        localStorage.setItem('refreshToken', response.refresh);\n      }\n      \n      setAccessToken(response.access || response.access_token);\n      setUser(response.user || null);\n      setIsAuthenticated(true);\n      \n      return response;\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    setAccessToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Registration function\n  const register = async (userData) => {\n    try {\n      // Ensure userData has password2 for the API\n      if (!userData.password2 && userData.password) {\n        userData = { ...userData, password2: userData.password };\n      }\n      \n      const response = await AuthAPI.register(userData);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n\n  const isAdmin = user && user.role === 'admin';\n\n  const value = {\n    user,\n    isAuthenticated,\n    isLoading,\n    accessToken,\n    login,\n    logout,\n    register,\n    isAdmin\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === null) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}