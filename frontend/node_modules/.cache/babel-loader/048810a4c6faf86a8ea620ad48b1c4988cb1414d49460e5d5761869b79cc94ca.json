{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(config => {\n  // Get token from localStorage\n  const token = localStorage.getItem('accessToken');\n\n  // If token exists, add to headers\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle token refresh on 401 errors\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Attempt to refresh token\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await axios.post('/auth/refresh/', {\n        refresh: refreshToken\n      });\n      const {\n        access\n      } = response.data;\n      localStorage.setItem('accessToken', access);\n      originalRequest.headers.Authorization = `Bearer ${access}`;\n      return api(originalRequest);\n    } catch (refreshError) {\n      // If refresh fails, logout\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth API endpoints\nexport const AuthAPI = {\n  login: credentials => api.post('/auth/login/', credentials),\n  register: userData => {\n    // Ensure password2 is included for FastAPI validation\n    if (!userData.password2 && userData.password) {\n      userData = {\n        ...userData,\n        password2: userData.password\n      };\n    }\n    return api.post('/auth/register/', userData);\n  },\n  refreshToken: refreshToken => api.post('/auth/refresh/', {\n    refresh: refreshToken\n  }),\n  getCurrentUser: () => api.get('/accounts/me/'),\n  logout: async () => {\n    await api.post('/auth/logout/');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n};\n\n// General API request function\nconst apiRequest = async (endpoint, method = 'GET', data = null, isFormData = false) => {\n  try {\n    const config = {\n      method: method,\n      url: endpoint\n    };\n    if (data) {\n      if (isFormData) {\n        config.data = data;\n        config.headers = {\n          ...config.headers,\n          'Content-Type': 'multipart/form-data'\n        };\n      } else {\n        config.data = data;\n      }\n    }\n    const response = await api(config);\n    return response.data;\n  } catch (error) {\n    console.error(`API request failed: ${endpoint}`, error);\n    throw error;\n  }\n};\nexport default apiRequest;\nexport { api };","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","Error","post","refresh","access","data","setItem","Authorization","refreshError","removeItem","window","location","href","AuthAPI","login","credentials","register","userData","password2","password","getCurrentUser","get","logout","apiRequest","endpoint","method","isFormData","url","console"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use(\n  (config) => {\n    // Get token from localStorage\n    const token = localStorage.getItem('accessToken');\n    \n    // If token exists, add to headers\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor to handle token refresh on 401 errors\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        // Attempt to refresh token\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (!refreshToken) {\n          throw new Error('No refresh token available');\n        }\n        \n        const response = await axios.post('/auth/refresh/', { refresh: refreshToken });\n        const { access } = response.data;\n        \n        localStorage.setItem('accessToken', access);\n        originalRequest.headers.Authorization = `Bearer ${access}`;\n        \n        return api(originalRequest);\n      } catch (refreshError) {\n        // If refresh fails, logout\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API endpoints\nexport const AuthAPI = {\n  login: (credentials) => api.post('/auth/login/', credentials),\n  register: (userData) => {\n    // Ensure password2 is included for FastAPI validation\n    if (!userData.password2 && userData.password) {\n      userData = { ...userData, password2: userData.password };\n    }\n    return api.post('/auth/register/', userData);\n  },\n  refreshToken: (refreshToken) => api.post('/auth/refresh/', { refresh: refreshToken }),\n  getCurrentUser: () => api.get('/accounts/me/'),\n  logout: async () => {\n    await api.post('/auth/logout/');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  },\n};\n\n// General API request function\nconst apiRequest = async (endpoint, method = 'GET', data = null, isFormData = false) => {\n  try {\n    const config = {\n      method: method,\n      url: endpoint,\n    };\n    \n    if (data) {\n      if (isFormData) {\n        config.data = data;\n        config.headers = {\n          ...config.headers,\n          'Content-Type': 'multipart/form-data',\n        };\n      } else {\n        config.data = data;\n      }\n    }\n    \n    const response = await api(config);\n    return response.data;\n  } catch (error) {\n    console.error(`API request failed: ${endpoint}`, error);\n    throw error;\n  }\n};\n\nexport default apiRequest;\nexport { api };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}