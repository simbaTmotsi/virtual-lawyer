{"ast":null,"code":"var _jsxFileName = \"/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport apiRequest from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n\n      // Verify token with the backend\n      const userData = await apiRequest('/api/accounts/user/', 'GET');\n      setUser(userData);\n      setIsAuthenticated(true);\n    } catch (error) {\n      // Invalid token, clear storage\n      localStorage.removeItem('token');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    // Make sure this endpoint matches your backend's login endpoint\n    const response = await apiRequest('/api/accounts/login/', 'POST', {\n      email,\n      password\n    });\n\n    // Save token after successful login\n    if (response.token) {\n      localStorage.setItem('token', response.token);\n      setUser(response.user);\n      setIsAuthenticated(true);\n    }\n    return response;\n  };\n  const register = async userData => {\n    // Make sure this endpoint matches your backend's registration endpoint\n    const response = await apiRequest('/api/accounts/register/', 'POST', userData);\n    return response;\n  };\n  const logout = async () => {\n    try {\n      // Optionally call logout endpoint\n      await apiRequest('/api/accounts/logout/', 'POST');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear regardless of backend response\n      localStorage.removeItem('token');\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, this);\n}\n_s(AuthProvider, \"MIOyihIJe1jbesOAPrjh1+/HIzc=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","apiRequest","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","checkAuthStatus","token","localStorage","getItem","userData","error","removeItem","login","email","password","response","setItem","register","logout","console","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport apiRequest from '../utils/api';\n\nconst AuthContext = createContext(null);\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n\n      // Verify token with the backend\n      const userData = await apiRequest('/api/accounts/user/', 'GET');\n      setUser(userData);\n      setIsAuthenticated(true);\n    } catch (error) {\n      // Invalid token, clear storage\n      localStorage.removeItem('token');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    // Make sure this endpoint matches your backend's login endpoint\n    const response = await apiRequest('/api/accounts/login/', 'POST', {\n      email,\n      password,\n    });\n\n    // Save token after successful login\n    if (response.token) {\n      localStorage.setItem('token', response.token);\n      setUser(response.user);\n      setIsAuthenticated(true);\n    }\n    return response;\n  };\n\n  const register = async (userData) => {\n    // Make sure this endpoint matches your backend's registration endpoint\n    const response = await apiRequest('/api/accounts/register/', 'POST', userData);\n    return response;\n  };\n\n  const logout = async () => {\n    try {\n      // Optionally call logout endpoint\n      await apiRequest('/api/accounts/logout/', 'POST');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear regardless of backend response\n      localStorage.removeItem('token');\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}