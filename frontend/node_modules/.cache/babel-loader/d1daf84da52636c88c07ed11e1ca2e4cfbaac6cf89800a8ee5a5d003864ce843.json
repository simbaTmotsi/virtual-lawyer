{"ast":null,"code":"/**\n * Helper utility for making authenticated API requests\n */\n\nexport const apiRequest = async (endpoint, method = 'GET', data = null) => {\n  // Update to use FastAPI base URL\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const url = `${baseUrl}${endpoint}`;\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n\n  // Add auth token to headers if it exists\n  const token = localStorage.getItem('token');\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  const options = {\n    method,\n    headers,\n    credentials: 'include' // For cookies if your backend uses them\n  };\n\n  // Add request body for POST, PUT, PATCH\n  if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {\n    options.body = JSON.stringify(data);\n  }\n  console.log(`Making ${method} request to ${url}`);\n  const response = await fetch(url, options);\n\n  // Check if the response is JSON\n  const contentType = response.headers.get('content-type');\n\n  // Process response based on status\n  if (!response.ok) {\n    // If we get a JSON error response, parse it\n    if (contentType && contentType.includes('application/json')) {\n      const errorData = await response.json();\n      throw {\n        status: response.status,\n        data: errorData\n      };\n    } else {\n      throw {\n        status: response.status,\n        data: {\n          detail: 'An error occurred'\n        }\n      };\n    }\n  }\n\n  // Return JSON data if available\n  if (contentType && contentType.includes('application/json')) {\n    return await response.json();\n  }\n  return await response.text();\n};\nexport default apiRequest;","map":{"version":3,"names":["apiRequest","endpoint","method","data","baseUrl","process","env","REACT_APP_API_URL","url","headers","token","localStorage","getItem","options","credentials","includes","body","JSON","stringify","console","log","response","fetch","contentType","get","ok","errorData","json","status","detail","text"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["/**\n * Helper utility for making authenticated API requests\n */\n\nexport const apiRequest = async (endpoint, method = 'GET', data = null) => {\n  // Update to use FastAPI base URL\n  const baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  const url = `${baseUrl}${endpoint}`;\n  \n  const headers = {\n    'Content-Type': 'application/json',\n  };\n  \n  // Add auth token to headers if it exists\n  const token = localStorage.getItem('token');\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  \n  const options = {\n    method,\n    headers,\n    credentials: 'include', // For cookies if your backend uses them\n  };\n  \n  // Add request body for POST, PUT, PATCH\n  if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {\n    options.body = JSON.stringify(data);\n  }\n  \n  console.log(`Making ${method} request to ${url}`);\n  \n  const response = await fetch(url, options);\n  \n  // Check if the response is JSON\n  const contentType = response.headers.get('content-type');\n  \n  // Process response based on status\n  if (!response.ok) {\n    // If we get a JSON error response, parse it\n    if (contentType && contentType.includes('application/json')) {\n      const errorData = await response.json();\n      throw { status: response.status, data: errorData };\n    } else {\n      throw { status: response.status, data: { detail: 'An error occurred' } };\n    }\n  }\n  \n  // Return JSON data if available\n  if (contentType && contentType.includes('application/json')) {\n    return await response.json();\n  }\n  \n  return await response.text();\n};\n\nexport default apiRequest;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,MAAMA,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,KAAK;EACzE;EACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACxE,MAAMC,GAAG,GAAG,GAAGJ,OAAO,GAAGH,QAAQ,EAAE;EAEnC,MAAMQ,OAAO,GAAG;IACd,cAAc,EAAE;EAClB,CAAC;;EAED;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUC,KAAK,EAAE;EAC9C;EAEA,MAAMG,OAAO,GAAG;IACdX,MAAM;IACNO,OAAO;IACPK,WAAW,EAAE,SAAS,CAAE;EAC1B,CAAC;;EAED;EACA,IAAIX,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAACY,QAAQ,CAACb,MAAM,CAAC,EAAE;IACrDW,OAAO,CAACG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC;EACrC;EAEAgB,OAAO,CAACC,GAAG,CAAC,UAAUlB,MAAM,eAAeM,GAAG,EAAE,CAAC;EAEjD,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAEK,OAAO,CAAC;;EAE1C;EACA,MAAMU,WAAW,GAAGF,QAAQ,CAACZ,OAAO,CAACe,GAAG,CAAC,cAAc,CAAC;;EAExD;EACA,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB;IACA,IAAIF,WAAW,IAAIA,WAAW,CAACR,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3D,MAAMW,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvC,MAAM;QAAEC,MAAM,EAAEP,QAAQ,CAACO,MAAM;QAAEzB,IAAI,EAAEuB;MAAU,CAAC;IACpD,CAAC,MAAM;MACL,MAAM;QAAEE,MAAM,EAAEP,QAAQ,CAACO,MAAM;QAAEzB,IAAI,EAAE;UAAE0B,MAAM,EAAE;QAAoB;MAAE,CAAC;IAC1E;EACF;;EAEA;EACA,IAAIN,WAAW,IAAIA,WAAW,CAACR,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC3D,OAAO,MAAMM,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B;EAEA,OAAO,MAAMN,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,eAAe9B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}