{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor to handle token refresh on 401 errors\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Attempt to refresh token\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await axios.post('/api/auth/refresh/', {\n        refresh: refreshToken\n      });\n      const {\n        access\n      } = response.data;\n      localStorage.setItem('accessToken', access);\n      originalRequest.headers.Authorization = `Bearer ${access}`;\n      return api(originalRequest);\n    } catch (refreshError) {\n      // If refresh fails, logout\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// AuthAPI methods for authentication operations\nexport const AuthAPI = {\n  login: async credentials => {\n    const response = await api.post('/api/auth/login/', credentials);\n    return response.data;\n  },\n  register: async userData => {\n    const response = await api.post('/api/auth/register/', userData);\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/api/accounts/me/');\n    return response.data;\n  },\n  logout: async () => {\n    await api.post('/api/auth/logout/');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n};\n\n// General API request function\nconst apiRequest = async (endpoint, method = 'GET', data = null, isFormData = false) => {\n  try {\n    const config = {\n      method: method,\n      url: endpoint\n    };\n    if (data) {\n      if (isFormData) {\n        config.data = data;\n        config.headers = {\n          ...config.headers,\n          'Content-Type': 'multipart/form-data'\n        };\n      } else {\n        config.data = data;\n      }\n    }\n    const response = await api(config);\n    return response.data;\n  } catch (error) {\n    console.error(`API request failed: ${endpoint}`, error);\n    throw error;\n  }\n};\nexport default apiRequest;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","Error","post","refresh","access","data","setItem","refreshError","removeItem","window","location","href","AuthAPI","login","credentials","register","userData","getCurrentUser","get","logout","apiRequest","endpoint","method","isFormData","url","console"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add request interceptor to add auth token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add response interceptor to handle token refresh on 401 errors\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        // Attempt to refresh token\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (!refreshToken) {\n          throw new Error('No refresh token available');\n        }\n        \n        const response = await axios.post('/api/auth/refresh/', { refresh: refreshToken });\n        const { access } = response.data;\n        \n        localStorage.setItem('accessToken', access);\n        originalRequest.headers.Authorization = `Bearer ${access}`;\n        \n        return api(originalRequest);\n      } catch (refreshError) {\n        // If refresh fails, logout\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        window.location.href = '/login';\n        return Promise.reject(refreshError);\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// AuthAPI methods for authentication operations\nexport const AuthAPI = {\n  login: async (credentials) => {\n    const response = await api.post('/api/auth/login/', credentials);\n    return response.data;\n  },\n  \n  register: async (userData) => {\n    const response = await api.post('/api/auth/register/', userData);\n    return response.data;\n  },\n  \n  getCurrentUser: async () => {\n    const response = await api.get('/api/accounts/me/');\n    return response.data;\n  },\n  \n  logout: async () => {\n    await api.post('/api/auth/logout/');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n};\n\n// General API request function\nconst apiRequest = async (endpoint, method = 'GET', data = null, isFormData = false) => {\n  try {\n    const config = {\n      method: method,\n      url: endpoint,\n    };\n    \n    if (data) {\n      if (isFormData) {\n        config.data = data;\n        config.headers = {\n          ...config.headers,\n          'Content-Type': 'multipart/form-data',\n        };\n      } else {\n        config.data = data;\n      }\n    }\n    \n    const response = await api(config);\n    return response.data;\n  } catch (error) {\n    console.error(`API request failed: ${endpoint}`, error);\n    throw error;\n  }\n};\n\nexport default apiRequest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}