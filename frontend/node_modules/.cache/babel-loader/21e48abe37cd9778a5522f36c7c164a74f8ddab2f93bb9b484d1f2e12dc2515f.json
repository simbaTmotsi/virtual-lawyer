{"ast":null,"code":"// Base URL for the API, can be configured through environment variables\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || '/api';\n\n/**\n * Helper function to perform API requests.\n * It handles common tasks like setting headers, stringifying body,\n * and basic error handling.\n */\nconst request = async (endpoint, options = {}) => {\n  const {\n    method = 'GET',\n    body,\n    isExternal = false,\n    ...customHeaders\n  } = options;\n  const headers = {\n    'Content-Type': 'application/json',\n    ...customHeaders\n  };\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  const config = {\n    method,\n    headers\n  };\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n  const url = isExternal ? endpoint : `${API_BASE_URL}${endpoint}`;\n  try {\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      var _errorData, _errorData2, _errorData3;\n      let errorData;\n      try {\n        errorData = await response.json();\n      } catch (e) {\n        errorData = {\n          message: response.statusText\n        };\n      }\n      const errorMessage = ((_errorData = errorData) === null || _errorData === void 0 ? void 0 : _errorData.error) || ((_errorData2 = errorData) === null || _errorData2 === void 0 ? void 0 : _errorData2.detail) || ((_errorData3 = errorData) === null || _errorData3 === void 0 ? void 0 : _errorData3.message) || `Request failed with status ${response.status}`;\n      throw new Error(errorMessage);\n    }\n    // For 204 No Content, response.json() will fail.\n    if (response.status === 204) {\n      return null;\n    }\n    return response.json();\n  } catch (error) {\n    console.error(`API request error to ${method} ${url}:`, error);\n    throw error; // Re-throw to be caught by the caller\n  }\n};\n\n// --- Research API Functions ---\n\n/**\n * Calls the Gemini API through the backend.\n * @param {string} query - The query text.\n * @param {Array} [documentContext] - Optional context from documents.\n * @param {Array} [chatHistory] - Optional chat history.\n * @returns {Promise<Object>} The API response.\n */\nexport const callQueryGemini = async (query, documentContext, chatHistory) => {\n  const payload = {\n    query\n  };\n  if (documentContext && documentContext.length > 0) payload.documentContext = documentContext;\n  if (chatHistory && chatHistory.length > 0) payload.chatHistory = chatHistory;\n  return request('/research/query_gemini/', {\n    method: 'POST',\n    body: payload\n  });\n};\n\n/**\n * Searches legal databases through the backend.\n * @param {Object} params - Parameters for the search.\n * @param {string} params.query - The search query.\n * @param {string} [params.database='all'] - The database to search.\n * @param {string} [params.jurisdiction] - The jurisdiction.\n * @param {string} [params.doc_type] - Document type.\n * @param {string} [params.date_from] - Start date for search.\n * @param {string} [params.date_to] - End date for search.\n * @returns {Promise<Object>} The API response.\n */\nexport const callSearchLegalDatabases = async params => {\n  // Filter out null/undefined params to keep payload clean\n  const payload = Object.fromEntries(Object.entries(params).filter(([_, v]) => v != null));\n  return request('/research/search_legal_databases/', {\n    method: 'POST',\n    body: payload\n  });\n};\n\n/**\n * Performs comprehensive research using AI and legal databases.\n * @param {Object} params - Parameters for comprehensive research.\n * @param {string} params.query - The research query.\n * @param {string} [params.jurisdiction] - The jurisdiction.\n * @param {string} [params.case_id] - Optional case ID.\n * @param {Array<string>} [params.document_ids] - Optional list of document IDs.\n * @returns {Promise<Object>} The API response.\n */\nexport const callComprehensiveResearch = async params => {\n  const payload = {\n    query: params.query\n  };\n  if (params.jurisdiction) payload.jurisdiction = params.jurisdiction;\n  if (params.case_id) payload.case_id = params.case_id;\n  if (params.document_ids && params.document_ids.length > 0) payload.document_ids = params.document_ids;\n  return request('/research/comprehensive_research/', {\n    method: 'POST',\n    body: payload\n  });\n};\n\n/**\n * Recommends relevant cases based on context.\n * @param {Object} params - Parameters for case recommendation.\n * @param {string} [params.description] - Description of what to search for.\n * @param {string} [params.case_id] - Optional case ID for context.\n * @param {string} [params.document_id] - Optional document ID for context.\n * @param {string} [params.jurisdiction] - The jurisdiction.\n * @returns {Promise<Object>} The API response.\n */\nexport const callRecommendCases = async params => {\n  const payload = {};\n  if (params.description) payload.description = params.description;\n  if (params.case_id) payload.case_id = params.case_id;\n  if (params.document_id) payload.document_id = params.document_id;\n  if (params.jurisdiction) payload.jurisdiction = params.jurisdiction;\n  return request('/research/recommend_cases/', {\n    method: 'POST',\n    body: payload\n  });\n};\n\n/**\n * Fetches research dashboard data.\n * @returns {Promise<Object>} The dashboard data.\n */\nexport const getResearchDashboardData = async () => {\n  return request('/research/dashboard/', {\n    method: 'GET'\n  });\n};\n\n/**\n * Fetches Google API usage metrics.\n * @param {Object} filters - Optional filters for the query.\n * @param {string} filters.metric_date_after - Start date (YYYY-MM-DD).\n * @param {string} filters.metric_date_before - End date (YYYY-MM-DD).\n * @param {string} filters.service_name - Specific service name.\n * @param {string} filters.metric_name - Specific metric name.\n * @returns {Promise<Array>} A list of API usage metrics.\n */\nexport const getGoogleApiMetrics = async (filters = {}) => {\n  const queryParams = new URLSearchParams(filters);\n  // Ensure the endpoint matches the one registered in backend analytics/urls.py\n  // The backend router for GoogleApiUsageMetricViewSet was registered under 'api/google-api-metrics/'\n  // So, the full path from API_BASE_URL would be /analytics/api/google-api-metrics/\n  const path = `/analytics/api/google-api-metrics/?${queryParams.toString()}`;\n  return request(path);\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","request","endpoint","options","method","body","isExternal","customHeaders","headers","token","localStorage","getItem","config","JSON","stringify","url","response","fetch","ok","_errorData","_errorData2","_errorData3","errorData","json","e","message","statusText","errorMessage","error","detail","status","Error","console","callQueryGemini","query","documentContext","chatHistory","payload","length","callSearchLegalDatabases","params","Object","fromEntries","entries","filter","_","v","callComprehensiveResearch","jurisdiction","case_id","document_ids","callRecommendCases","description","document_id","getResearchDashboardData","getGoogleApiMetrics","filters","queryParams","URLSearchParams","path","toString"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/apiClient.js"],"sourcesContent":["// Base URL for the API, can be configured through environment variables\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || '/api';\n\n/**\n * Helper function to perform API requests.\n * It handles common tasks like setting headers, stringifying body,\n * and basic error handling.\n */\nconst request = async (endpoint, options = {}) => {\n  const { method = 'GET', body, isExternal = false, ...customHeaders } = options;\n  \n  const headers = {\n    'Content-Type': 'application/json',\n    ...customHeaders,\n  };\n\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  const config = {\n    method,\n    headers,\n  };\n\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n  \n  const url = isExternal ? endpoint : `${API_BASE_URL}${endpoint}`;\n\n  try {\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      let errorData;\n      try {\n        errorData = await response.json();\n      } catch (e) {\n        errorData = { message: response.statusText };\n      }\n      const errorMessage = errorData?.error || errorData?.detail || errorData?.message || `Request failed with status ${response.status}`;\n      throw new Error(errorMessage);\n    }\n    // For 204 No Content, response.json() will fail.\n    if (response.status === 204) {\n        return null; \n    }\n    return response.json();\n  } catch (error) {\n    console.error(`API request error to ${method} ${url}:`, error);\n    throw error; // Re-throw to be caught by the caller\n  }\n};\n\n// --- Research API Functions ---\n\n/**\n * Calls the Gemini API through the backend.\n * @param {string} query - The query text.\n * @param {Array} [documentContext] - Optional context from documents.\n * @param {Array} [chatHistory] - Optional chat history.\n * @returns {Promise<Object>} The API response.\n */\nexport const callQueryGemini = async (query, documentContext, chatHistory) => {\n  const payload = { query };\n  if (documentContext && documentContext.length > 0) payload.documentContext = documentContext;\n  if (chatHistory && chatHistory.length > 0) payload.chatHistory = chatHistory;\n  \n  return request('/research/query_gemini/', { method: 'POST', body: payload });\n};\n\n/**\n * Searches legal databases through the backend.\n * @param {Object} params - Parameters for the search.\n * @param {string} params.query - The search query.\n * @param {string} [params.database='all'] - The database to search.\n * @param {string} [params.jurisdiction] - The jurisdiction.\n * @param {string} [params.doc_type] - Document type.\n * @param {string} [params.date_from] - Start date for search.\n * @param {string} [params.date_to] - End date for search.\n * @returns {Promise<Object>} The API response.\n */\nexport const callSearchLegalDatabases = async (params) => {\n  // Filter out null/undefined params to keep payload clean\n  const payload = Object.fromEntries(Object.entries(params).filter(([_, v]) => v != null));\n  return request('/research/search_legal_databases/', { method: 'POST', body: payload });\n};\n\n/**\n * Performs comprehensive research using AI and legal databases.\n * @param {Object} params - Parameters for comprehensive research.\n * @param {string} params.query - The research query.\n * @param {string} [params.jurisdiction] - The jurisdiction.\n * @param {string} [params.case_id] - Optional case ID.\n * @param {Array<string>} [params.document_ids] - Optional list of document IDs.\n * @returns {Promise<Object>} The API response.\n */\nexport const callComprehensiveResearch = async (params) => {\n  const payload = { query: params.query };\n  if (params.jurisdiction) payload.jurisdiction = params.jurisdiction;\n  if (params.case_id) payload.case_id = params.case_id;\n  if (params.document_ids && params.document_ids.length > 0) payload.document_ids = params.document_ids;\n  \n  return request('/research/comprehensive_research/', { method: 'POST', body: payload });\n};\n\n/**\n * Recommends relevant cases based on context.\n * @param {Object} params - Parameters for case recommendation.\n * @param {string} [params.description] - Description of what to search for.\n * @param {string} [params.case_id] - Optional case ID for context.\n * @param {string} [params.document_id] - Optional document ID for context.\n * @param {string} [params.jurisdiction] - The jurisdiction.\n * @returns {Promise<Object>} The API response.\n */\nexport const callRecommendCases = async (params) => {\n  const payload = {};\n  if (params.description) payload.description = params.description;\n  if (params.case_id) payload.case_id = params.case_id;\n  if (params.document_id) payload.document_id = params.document_id;\n  if (params.jurisdiction) payload.jurisdiction = params.jurisdiction;\n  \n  return request('/research/recommend_cases/', { method: 'POST', body: payload });\n};\n\n/**\n * Fetches research dashboard data.\n * @returns {Promise<Object>} The dashboard data.\n */\nexport const getResearchDashboardData = async () => {\n  return request('/research/dashboard/', { method: 'GET' });\n};\n\n/**\n * Fetches Google API usage metrics.\n * @param {Object} filters - Optional filters for the query.\n * @param {string} filters.metric_date_after - Start date (YYYY-MM-DD).\n * @param {string} filters.metric_date_before - End date (YYYY-MM-DD).\n * @param {string} filters.service_name - Specific service name.\n * @param {string} filters.metric_name - Specific metric name.\n * @returns {Promise<Array>} A list of API usage metrics.\n */\nexport const getGoogleApiMetrics = async (filters = {}) => {\n  const queryParams = new URLSearchParams(filters);\n  // Ensure the endpoint matches the one registered in backend analytics/urls.py\n  // The backend router for GoogleApiUsageMetricViewSet was registered under 'api/google-api-metrics/'\n  // So, the full path from API_BASE_URL would be /analytics/api/google-api-metrics/\n  const path = `/analytics/api/google-api-metrics/?${queryParams.toString()}`;\n  return request(path); \n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}