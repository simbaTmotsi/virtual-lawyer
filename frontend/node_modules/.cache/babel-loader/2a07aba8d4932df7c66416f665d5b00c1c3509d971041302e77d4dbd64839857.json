{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nexport const setAuthToken = token => {\n  if (token) {\n    localStorage.setItem('authToken', token);\n    // Also set for refresh token if your backend provides one\n    // localStorage.setItem('refreshToken', refreshToken);\n  } else {\n    localStorage.removeItem('authToken');\n    // localStorage.removeItem('refreshToken');\n  }\n};\nexport const getAuthToken = () => {\n  return localStorage.getItem('authToken');\n};\nconst apiRequest = async (endpoint, method = 'GET', data = null, authenticated = true) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n\n  // Add auth token to headers if authenticated request\n  if (authenticated) {\n    const token = getAuthToken();\n    if (!token) {\n      throw new Error('Authentication required but no token found');\n    }\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  const config = {\n    method,\n    headers,\n    credentials: 'include' // Include cookies if your API uses them\n  };\n  if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n    config.body = JSON.stringify(data);\n  }\n  try {\n    const response = await fetch(url, config);\n    const contentType = response.headers.get('content-type');\n\n    // Check if response is JSON\n    const isJson = contentType && contentType.includes('application/json');\n    const responseData = isJson ? await response.json() : await response.text();\n    if (!response.ok) {\n      // Enhance error object with status and data\n      const error = new Error(responseData.detail || 'API request failed');\n      error.status = response.status;\n      error.data = responseData;\n      throw error;\n    }\n    return responseData;\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error);\n    throw error;\n  }\n};\nexport default apiRequest;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","setAuthToken","token","localStorage","setItem","removeItem","getAuthToken","getItem","apiRequest","endpoint","method","data","authenticated","url","headers","Error","config","credentials","body","JSON","stringify","response","fetch","contentType","get","isJson","includes","responseData","json","text","ok","error","detail","status","console"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nexport const setAuthToken = (token) => {\n  if (token) {\n    localStorage.setItem('authToken', token);\n    // Also set for refresh token if your backend provides one\n    // localStorage.setItem('refreshToken', refreshToken);\n  } else {\n    localStorage.removeItem('authToken');\n    // localStorage.removeItem('refreshToken');\n  }\n};\n\nexport const getAuthToken = () => {\n  return localStorage.getItem('authToken');\n};\n\nconst apiRequest = async (endpoint, method = 'GET', data = null, authenticated = true) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  \n  const headers = {\n    'Content-Type': 'application/json',\n  };\n  \n  // Add auth token to headers if authenticated request\n  if (authenticated) {\n    const token = getAuthToken();\n    if (!token) {\n      throw new Error('Authentication required but no token found');\n    }\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  \n  const config = {\n    method,\n    headers,\n    credentials: 'include', // Include cookies if your API uses them\n  };\n  \n  if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n    config.body = JSON.stringify(data);\n  }\n  \n  try {\n    const response = await fetch(url, config);\n    const contentType = response.headers.get('content-type');\n    \n    // Check if response is JSON\n    const isJson = contentType && contentType.includes('application/json');\n    const responseData = isJson ? await response.json() : await response.text();\n    \n    if (!response.ok) {\n      // Enhance error object with status and data\n      const error = new Error(responseData.detail || 'API request failed');\n      error.status = response.status;\n      error.data = responseData;\n      throw error;\n    }\n    \n    return responseData;\n  } catch (error) {\n    console.error(`API Error (${endpoint}):`, error);\n    throw error;\n  }\n};\n\nexport default apiRequest;\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EACrC,IAAIA,KAAK,EAAE;IACTC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,KAAK,CAAC;IACxC;IACA;EACF,CAAC,MAAM;IACLC,YAAY,CAACE,UAAU,CAAC,WAAW,CAAC;IACpC;EACF;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAChC,OAAOH,YAAY,CAACI,OAAO,CAAC,WAAW,CAAC;AAC1C,CAAC;AAED,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,EAAEC,aAAa,GAAG,IAAI,KAAK;EACxF,MAAMC,GAAG,GAAG,GAAGhB,YAAY,GAAGY,QAAQ,EAAE;EAExC,MAAMK,OAAO,GAAG;IACd,cAAc,EAAE;EAClB,CAAC;;EAED;EACA,IAAIF,aAAa,EAAE;IACjB,MAAMV,KAAK,GAAGI,YAAY,CAAC,CAAC;IAC5B,IAAI,CAACJ,KAAK,EAAE;MACV,MAAM,IAAIa,KAAK,CAAC,4CAA4C,CAAC;IAC/D;IACAD,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUZ,KAAK,EAAE;EAC9C;EAEA,MAAMc,MAAM,GAAG;IACbN,MAAM;IACNI,OAAO;IACPG,WAAW,EAAE,SAAS,CAAE;EAC1B,CAAC;EAED,IAAIN,IAAI,KAAKD,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,KAAK,IAAIA,MAAM,KAAK,OAAO,CAAC,EAAE;IACzEM,MAAM,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC;EACpC;EAEA,IAAI;IACF,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,EAAEG,MAAM,CAAC;IACzC,MAAMO,WAAW,GAAGF,QAAQ,CAACP,OAAO,CAACU,GAAG,CAAC,cAAc,CAAC;;IAExD;IACA,MAAMC,MAAM,GAAGF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC;IACtE,MAAMC,YAAY,GAAGF,MAAM,GAAG,MAAMJ,QAAQ,CAACO,IAAI,CAAC,CAAC,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAE3E,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;MAChB;MACA,MAAMC,KAAK,GAAG,IAAIhB,KAAK,CAACY,YAAY,CAACK,MAAM,IAAI,oBAAoB,CAAC;MACpED,KAAK,CAACE,MAAM,GAAGZ,QAAQ,CAACY,MAAM;MAC9BF,KAAK,CAACpB,IAAI,GAAGgB,YAAY;MACzB,MAAMI,KAAK;IACb;IAEA,OAAOJ,YAAY;EACrB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdG,OAAO,CAACH,KAAK,CAAC,cAActB,QAAQ,IAAI,EAAEsB,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAevB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}