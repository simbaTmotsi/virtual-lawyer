{"ast":null,"code":"var _jsxFileName = \"/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport apiRequest, { setAuthToken, getAuthToken } from '../utils/api'; // Import API utility\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true); // Add loading state\n  const [token, setTokenState] = useState(getAuthToken()); // Initialize token from storage\n\n  const handleSetToken = newToken => {\n    setAuthToken(newToken); // Store in localStorage\n    setTokenState(newToken); // Update context state\n  };\n\n  // Function to fetch user profile based on token\n  const fetchUserProfile = useCallback(async () => {\n    if (!token) {\n      setUser(null);\n      setLoading(false);\n      return;\n    }\n    setLoading(true);\n    try {\n      // Assuming you have a '/accounts/profile/' endpoint\n      const userData = await apiRequest('/accounts/profile/', 'GET');\n      setUser(userData);\n    } catch (error) {\n      console.error(\"Failed to fetch user profile:\", error);\n      // If token is invalid (e.g., 401 error), log out\n      if (error.status === 401 || error.status === 403) {\n        handleSetToken(null);\n        setUser(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [token]); // Dependency on token\n\n  useEffect(() => {\n    fetchUserProfile();\n  }, [fetchUserProfile]); // Fetch profile when token changes or on initial load\n\n  const login = async (email, password) => {\n    try {\n      // Adjust endpoint and expected response structure based on your backend\n      const data = await apiRequest('/accounts/login/', 'POST', {\n        email,\n        password\n      }, false);\n      if (data.access) {\n        // Assuming backend returns access token\n        handleSetToken(data.access);\n        // Optionally fetch user profile immediately or rely on useEffect\n        await fetchUserProfile(); // Fetch profile after setting token\n      } else {\n        throw new Error(\"Login failed: No token received\");\n      }\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      handleSetToken(null); // Clear token on login failure\n      setUser(null);\n      throw error; // Re-throw error for the component to handle\n    }\n  };\n  const register = async userData => {\n    try {\n      // Adjust endpoint as needed, e.g., '/accounts/register/'\n      // Assuming registration doesn't automatically log in or return a token\n      await apiRequest('/accounts/register/', 'POST', userData, false);\n      // Optionally, you could automatically log in the user here by calling login()\n    } catch (error) {\n      console.error(\"Registration failed:\", error);\n      throw error; // Re-throw error for the component to handle\n    }\n  };\n  const logout = () => {\n    handleSetToken(null); // Clear token from storage and state\n    setUser(null); // Clear user state\n    // Optionally: Call a backend logout endpoint if it exists to invalidate the token server-side\n    // apiRequest('/accounts/logout/', 'POST').catch(err => console.error(\"Backend logout failed:\", err));\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    register,\n    // Add register to context\n    isAuthenticated: !!token && !!user,\n    // Base authentication on token presence and valid user\n    loading // Expose loading state\n  };\n\n  // Render children only after initial loading is complete\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading ? children : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 30\n    }, this) /* Or a proper loading spinner */\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"TaO87WQs3UyTzkOc+nqEw2HRf/o=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","apiRequest","setAuthToken","getAuthToken","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","token","setTokenState","handleSetToken","newToken","fetchUserProfile","userData","error","console","status","login","email","password","data","access","Error","register","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport apiRequest, { setAuthToken, getAuthToken } from '../utils/api'; // Import API utility\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true); // Add loading state\n  const [token, setTokenState] = useState(getAuthToken()); // Initialize token from storage\n\n  const handleSetToken = (newToken) => {\n    setAuthToken(newToken); // Store in localStorage\n    setTokenState(newToken); // Update context state\n  };\n\n  // Function to fetch user profile based on token\n  const fetchUserProfile = useCallback(async () => {\n    if (!token) {\n      setUser(null);\n      setLoading(false);\n      return;\n    }\n    setLoading(true);\n    try {\n      // Assuming you have a '/accounts/profile/' endpoint\n      const userData = await apiRequest('/accounts/profile/', 'GET');\n      setUser(userData);\n    } catch (error) {\n      console.error(\"Failed to fetch user profile:\", error);\n      // If token is invalid (e.g., 401 error), log out\n      if (error.status === 401 || error.status === 403) {\n        handleSetToken(null);\n        setUser(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [token]); // Dependency on token\n\n  useEffect(() => {\n    fetchUserProfile();\n  }, [fetchUserProfile]); // Fetch profile when token changes or on initial load\n\n  const login = async (email, password) => {\n    try {\n      // Adjust endpoint and expected response structure based on your backend\n      const data = await apiRequest('/accounts/login/', 'POST', { email, password }, false);\n      if (data.access) { // Assuming backend returns access token\n        handleSetToken(data.access);\n        // Optionally fetch user profile immediately or rely on useEffect\n        await fetchUserProfile(); // Fetch profile after setting token\n      } else {\n        throw new Error(\"Login failed: No token received\");\n      }\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      handleSetToken(null); // Clear token on login failure\n      setUser(null);\n      throw error; // Re-throw error for the component to handle\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      // Adjust endpoint as needed, e.g., '/accounts/register/'\n      // Assuming registration doesn't automatically log in or return a token\n      await apiRequest('/accounts/register/', 'POST', userData, false);\n      // Optionally, you could automatically log in the user here by calling login()\n    } catch (error) {\n      console.error(\"Registration failed:\", error);\n      throw error; // Re-throw error for the component to handle\n    }\n  };\n\n\n  const logout = () => {\n    handleSetToken(null); // Clear token from storage and state\n    setUser(null); // Clear user state\n    // Optionally: Call a backend logout endpoint if it exists to invalidate the token server-side\n    // apiRequest('/accounts/logout/', 'POST').catch(err => console.error(\"Backend logout failed:\", err));\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    register, // Add register to context\n    isAuthenticated: !!token && !!user, // Base authentication on token presence and valid user\n    loading // Expose loading state\n  };\n\n  // Render children only after initial loading is complete\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading ? children : <div>Loading...</div> /* Or a proper loading spinner */}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}