{"ast":null,"code":"/**\n * API request utility for making authenticated requests\n */\n\n// Modify your apiRequest function to better handle and debug responses\nconst apiRequest = async (endpoint, method = 'GET', data = null, config = {}) => {\n  try {\n    const url = `${process.env.REACT_APP_API_URL || ''}${endpoint}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      ...config.headers\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    const options = {\n      method,\n      headers,\n      ...config\n    };\n    if (data && method !== 'GET') {\n      // Don't set body for FormData\n      if (!(data instanceof FormData)) {\n        options.body = JSON.stringify(data);\n      } else {\n        // For FormData, remove Content-Type so browser sets it with boundary\n        delete options.headers['Content-Type'];\n        options.body = data;\n      }\n    }\n    console.log(`API Request: ${method} ${url}`, options);\n    const response = await fetch(url, options);\n    console.log(`API Response status:`, response.status);\n\n    // Clone the response for logging\n    const responseClone = response.clone();\n    try {\n      const responseText = await responseClone.text();\n      console.log('API Response text:', responseText);\n\n      // Try parsing as JSON\n      let responseData;\n      try {\n        responseData = JSON.parse(responseText);\n      } catch (e) {\n        console.log('Response is not JSON:', e);\n        // Return the text if not JSON\n        return responseText;\n      }\n\n      // If we got JSON, check for error status\n      if (!response.ok) {\n        throw {\n          status: response.status,\n          data: responseData\n        };\n      }\n      return responseData;\n    } catch (parseError) {\n      console.error('Error parsing response:', parseError);\n      throw parseError;\n    }\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Auth API endpoints\nexport const AuthAPI = {\n  // Login\n  login: async credentials => {\n    try {\n      return await apiRequest('/api/accounts/proxy-login/', 'POST', credentials);\n    } catch (error) {\n      console.error('Login API error:', error);\n      throw error;\n    }\n  },\n  // Register\n  register: async userData => {\n    try {\n      return await apiRequest('/api/accounts/register/', 'POST', userData);\n    } catch (error) {\n      console.error('Registration API error:', error);\n      throw error;\n    }\n  },\n  // Get current user\n  getCurrentUser: async () => {\n    try {\n      return await apiRequest('/api/accounts/me/');\n    } catch (error) {\n      console.error('Get current user API error:', error);\n      throw error;\n    }\n  },\n  // Logout\n  logout: async () => {\n    try {\n      return await apiRequest('/api/accounts/logout/', 'POST');\n    } catch (error) {\n      console.error('Logout API error:', error);\n      // Still clear token even if logout API fails\n      localStorage.removeItem('token');\n      throw error;\n    }\n  }\n};\nexport default apiRequest;","map":{"version":3,"names":["apiRequest","endpoint","method","data","config","url","process","env","REACT_APP_API_URL","headers","token","localStorage","getItem","options","FormData","body","JSON","stringify","console","log","response","fetch","status","responseClone","clone","responseText","text","responseData","parse","e","ok","parseError","error","AuthAPI","login","credentials","register","userData","getCurrentUser","logout","removeItem"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["/**\n * API request utility for making authenticated requests\n */\n\n// Modify your apiRequest function to better handle and debug responses\nconst apiRequest = async (endpoint, method = 'GET', data = null, config = {}) => {\n  try {\n    const url = `${process.env.REACT_APP_API_URL || ''}${endpoint}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      ...config.headers\n    };\n\n    // Add auth token if available\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    const options = {\n      method,\n      headers,\n      ...config\n    };\n\n    if (data && method !== 'GET') {\n      // Don't set body for FormData\n      if (!(data instanceof FormData)) {\n        options.body = JSON.stringify(data);\n      } else {\n        // For FormData, remove Content-Type so browser sets it with boundary\n        delete options.headers['Content-Type'];\n        options.body = data;\n      }\n    }\n\n    console.log(`API Request: ${method} ${url}`, options);\n    \n    const response = await fetch(url, options);\n    console.log(`API Response status:`, response.status);\n    \n    // Clone the response for logging\n    const responseClone = response.clone();\n    \n    try {\n      const responseText = await responseClone.text();\n      console.log('API Response text:', responseText);\n      \n      // Try parsing as JSON\n      let responseData;\n      try {\n        responseData = JSON.parse(responseText);\n      } catch (e) {\n        console.log('Response is not JSON:', e);\n        // Return the text if not JSON\n        return responseText;\n      }\n      \n      // If we got JSON, check for error status\n      if (!response.ok) {\n        throw { status: response.status, data: responseData };\n      }\n      \n      return responseData;\n    } catch (parseError) {\n      console.error('Error parsing response:', parseError);\n      throw parseError;\n    }\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Auth API endpoints\nexport const AuthAPI = {\n  // Login\n  login: async (credentials) => {\n    try {\n      return await apiRequest('/api/accounts/proxy-login/', 'POST', credentials);\n    } catch (error) {\n      console.error('Login API error:', error);\n      throw error;\n    }\n  },\n  \n  // Register\n  register: async (userData) => {\n    try {\n      return await apiRequest('/api/accounts/register/', 'POST', userData);\n    } catch (error) {\n      console.error('Registration API error:', error);\n      throw error;\n    }\n  },\n  \n  // Get current user\n  getCurrentUser: async () => {\n    try {\n      return await apiRequest('/api/accounts/me/');\n    } catch (error) {\n      console.error('Get current user API error:', error);\n      throw error;\n    }\n  },\n  \n  // Logout\n  logout: async () => {\n    try {\n      return await apiRequest('/api/accounts/logout/', 'POST');\n    } catch (error) {\n      console.error('Logout API error:', error);\n      // Still clear token even if logout API fails\n      localStorage.removeItem('token');\n      throw error;\n    }\n  }\n};\n\nexport default apiRequest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}