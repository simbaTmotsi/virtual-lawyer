{"ast":null,"code":"/**\n * Format date to a more readable format\n * @param {string} dateString - Date string to format\n * @returns {string} Formatted date string\n */\nexport const formatDate = dateString => {\n  if (!dateString) return 'N/A';\n  const date = new Date(dateString);\n  return date.toLocaleDateString(undefined, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n};\n\n/**\n * Get CSS class for invoice status\n * @param {string} status - Invoice status\n * @returns {string} CSS classes for the status\n */\nexport const getStatusClass = status => {\n  switch (status) {\n    case 'draft':\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';\n    case 'sent':\n      return 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-200';\n    case 'paid':\n      return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-200';\n    case 'overdue':\n      return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-200';\n    case 'void':\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';\n    default:\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';\n  }\n};\n\n/**\n * Format currency amount\n * @param {number} amount - Amount to format\n * @returns {string} Formatted currency string\n */\nexport const formatCurrency = amount => {\n  if (amount === null || amount === undefined) return '$0.00';\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2\n  }).format(amount);\n};","map":{"version":3,"names":["formatDate","dateString","date","Date","toLocaleDateString","undefined","year","month","day","getStatusClass","status","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","format"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/index.js"],"sourcesContent":["/**\n * Format date to a more readable format\n * @param {string} dateString - Date string to format\n * @returns {string} Formatted date string\n */\nexport const formatDate = (dateString) => {\n  if (!dateString) return 'N/A';\n  \n  const date = new Date(dateString);\n  return date.toLocaleDateString(undefined, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n};\n\n/**\n * Get CSS class for invoice status\n * @param {string} status - Invoice status\n * @returns {string} CSS classes for the status\n */\nexport const getStatusClass = (status) => {\n  switch (status) {\n    case 'draft':\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';\n    case 'sent':\n      return 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-200';\n    case 'paid':\n      return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-200';\n    case 'overdue':\n      return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-200';\n    case 'void':\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';\n    default:\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';\n  }\n};\n\n/**\n * Format currency amount\n * @param {number} amount - Amount to format\n * @returns {string} Formatted currency string\n */\nexport const formatCurrency = (amount) => {\n  if (amount === null || amount === undefined) return '$0.00';\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2\n  }).format(amount);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAIC,UAAU,IAAK;EACxC,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;EAE7B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAOC,IAAI,CAACE,kBAAkB,CAACC,SAAS,EAAE;IACxCC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE;EACP,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACxC,QAAQA,MAAM;IACZ,KAAK,OAAO;MACV,OAAO,+DAA+D;IACxE,KAAK,MAAM;MACT,OAAO,kEAAkE;IAC3E,KAAK,MAAM;MACT,OAAO,sEAAsE;IAC/E,KAAK,SAAS;MACZ,OAAO,8DAA8D;IACvE,KAAK,MAAM;MACT,OAAO,+DAA+D;IACxE;MACE,OAAO,+DAA+D;EAC1E;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACxC,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKP,SAAS,EAAE,OAAO,OAAO;EAC3D,OAAO,IAAIQ,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACN,MAAM,CAAC;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}