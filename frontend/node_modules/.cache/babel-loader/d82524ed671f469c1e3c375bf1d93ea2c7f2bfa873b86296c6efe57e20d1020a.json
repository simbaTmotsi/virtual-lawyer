{"ast":null,"code":"/**\n * API request utility for making authenticated requests\n */\n\n// Base API request function\nexport const apiRequest = async (endpoint, options = {}) => {\n  const baseUrl = process.env.REACT_APP_API_URL || '';\n  const url = `${baseUrl}${endpoint}`;\n\n  // Changed from 'authToken' to 'token' to match what's used in AuthContext\n  const token = localStorage.getItem('token');\n  const defaultHeaders = {\n    'Content-Type': 'application/json'\n  };\n  if (token) {\n    defaultHeaders['Authorization'] = `Bearer ${token}`;\n  }\n  const config = {\n    ...options,\n    headers: {\n      ...defaultHeaders,\n      ...options.headers\n    }\n  };\n  try {\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n    }\n\n    // Check if the response is empty or not JSON\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      return await response.json();\n    }\n    return {};\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Auth API endpoints\nexport const AuthAPI = {\n  // Login\n  login: async credentials => {\n    try {\n      return await apiRequest('/api/accounts/proxy-login/', {\n        method: 'POST',\n        body: JSON.stringify(credentials)\n      });\n    } catch (error) {\n      console.error('Login API error:', error);\n      throw error;\n    }\n  },\n  // Register\n  register: async userData => {\n    try {\n      return await apiRequest('/api/accounts/register/', {\n        method: 'POST',\n        body: JSON.stringify(userData)\n      });\n    } catch (error) {\n      console.error('Registration API error:', error);\n      throw error;\n    }\n  },\n  // Get current user\n  getCurrentUser: async () => {\n    try {\n      return await apiRequest('/api/accounts/me/');\n    } catch (error) {\n      console.error('Get current user API error:', error);\n      throw error;\n    }\n  },\n  // Logout\n  logout: async () => {\n    try {\n      return await apiRequest('/api/accounts/logout/', {\n        method: 'POST'\n      });\n    } catch (error) {\n      console.error('Logout API error:', error);\n      // Still clear token even if logout API fails\n      localStorage.removeItem('token');\n      throw error;\n    }\n  }\n};\n\n// Export the base request function as default\nexport default apiRequest;","map":{"version":3,"names":["apiRequest","endpoint","options","baseUrl","process","env","REACT_APP_API_URL","url","token","localStorage","getItem","defaultHeaders","config","headers","response","fetch","ok","errorData","json","catch","Error","message","status","contentType","get","includes","error","console","AuthAPI","login","credentials","method","body","JSON","stringify","register","userData","getCurrentUser","logout","removeItem"],"sources":["/Users/simbatmotsi/Documents/Projects/virtual-lawyer/frontend/src/utils/api.js"],"sourcesContent":["/**\n * API request utility for making authenticated requests\n */\n\n// Base API request function\nexport const apiRequest = async (endpoint, options = {}) => {\n  const baseUrl = process.env.REACT_APP_API_URL || '';\n  const url = `${baseUrl}${endpoint}`;\n  \n  // Changed from 'authToken' to 'token' to match what's used in AuthContext\n  const token = localStorage.getItem('token');\n  \n  const defaultHeaders = {\n    'Content-Type': 'application/json',\n  };\n  \n  if (token) {\n    defaultHeaders['Authorization'] = `Bearer ${token}`;\n  }\n  \n  const config = {\n    ...options,\n    headers: {\n      ...defaultHeaders,\n      ...options.headers,\n    },\n  };\n  \n  try {\n    const response = await fetch(url, config);\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);\n    }\n    \n    // Check if the response is empty or not JSON\n    const contentType = response.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      return await response.json();\n    }\n    \n    return {};\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Auth API endpoints\nexport const AuthAPI = {\n  // Login\n  login: async (credentials) => {\n    try {\n      return await apiRequest('/api/accounts/proxy-login/', {\n        method: 'POST',\n        body: JSON.stringify(credentials)\n      });\n    } catch (error) {\n      console.error('Login API error:', error);\n      throw error;\n    }\n  },\n  \n  // Register\n  register: async (userData) => {\n    try {\n      return await apiRequest('/api/accounts/register/', {\n        method: 'POST',\n        body: JSON.stringify(userData)\n      });\n    } catch (error) {\n      console.error('Registration API error:', error);\n      throw error;\n    }\n  },\n  \n  // Get current user\n  getCurrentUser: async () => {\n    try {\n      return await apiRequest('/api/accounts/me/');\n    } catch (error) {\n      console.error('Get current user API error:', error);\n      throw error;\n    }\n  },\n  \n  // Logout\n  logout: async () => {\n    try {\n      return await apiRequest('/api/accounts/logout/', {\n        method: 'POST'\n      });\n    } catch (error) {\n      console.error('Logout API error:', error);\n      // Still clear token even if logout API fails\n      localStorage.removeItem('token');\n      throw error;\n    }\n  }\n};\n\n// Export the base request function as default\nexport default apiRequest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}