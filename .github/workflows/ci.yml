name: EasyLaw CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests
      env:
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DJANGO_SECRET_KEY: test-secret-key
      run: |
        cd backend
        python manage.py test

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Check Node modules
      run: |
        cd frontend
        ls -la node_modules
        npm list --depth=0
    
    - name: Create test env file if it doesn't exist
      run: |
        cd frontend
        touch .env.test

    - name: Run frontend tests
      continue-on-error: true
      run: |
        cd frontend
        npx react-scripts test --transformIgnorePatterns "node_modules/(?!axios)/" --env=jsdom --watchAll=false --passWithNoTests --verbose
    
    - name: Check for linting capabilities
      id: check-lint
      continue-on-error: true
      run: |
        cd frontend
        if grep -q '"lint"' package.json; then
          echo "has_lint=true" >> $GITHUB_OUTPUT
        elif [ -f .eslintrc.js ] || [ -f .eslintrc.json ] || [ -f .eslintrc ]; then
          echo "has_eslint=true" >> $GITHUB_OUTPUT
        else
          echo "No linting configuration found."
        fi

    - name: Run linting (if available)
      if: steps.check-lint.outputs.has_lint == 'true'
      run: |
        cd frontend
        npm run lint -- --max-warnings=0

    - name: Run ESLint directly (if available)
      if: steps.check-lint.outputs.has_lint != 'true' && steps.check-lint.outputs.has_eslint == 'true'
      run: |
        cd frontend
        npx eslint src/ --max-warnings=0

    - name: Skipping lint
      if: steps.check-lint.outputs.has_lint != 'true' && steps.check-lint.outputs.has_eslint != 'true'
      run: echo "Linting step skipped - no lint configuration found."

  build-and-push:
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: yourusername/easylaw-backend:latest
    
    - name: Build and push frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: yourusername/easylaw-frontend:latest
